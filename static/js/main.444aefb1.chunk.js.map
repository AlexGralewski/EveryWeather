{"version":3,"sources":["images/starting-bg.jpg","images/clear-day-bg.jpg","images/clear-night-bg.jpg","images/clouds-day-bg.jpg","images/clouds-night-bg.jpg","images/clouds-bg.jpg","images/rain-day-bg.jpg","images/rain-night-bg.jpg","images/rain-bg.jpg","images/smog-bg.jpg","images/snow-bg.jpg","images/storm-bg.png","methods/timestampToTime.js","methods/getWeatherIcon.js","methods/windDirection.js","components/CurrentWeatherDisplay.js","methods/dayOfTheWeek.js","components/ForecastDay.js","components/ForecastDisplay.js","methods/getBackgroundImage.js","components/WeatherApp.js","components/Footer.js","App.js","index.js"],"names":["module","exports","timestampToTime","timestamp","dateObject","Date","hours","getHours","minutes","getMinutes","getWeatherIcon","iconId","className","windDirection","deg","CurrentWeatherDisplay","props","city","country","lat","long","currentWeather","currentDisplay","undefined","place","currentWeatherIcon","style","display","description","temp","feels_like","humidity","clouds","uvi","visibility","wind","pressure","sunrise","sunset","dayOfTheWeek","dayNumber","0","1","2","3","4","5","6","ForecastDay","whichDay","humidityIcon","day","weather","today","weatherIcon","Math","round","night","ForecastDisplay","forecastDisplay","forecastWeather","getDay","map","key","dayIndex","getBackgroundImage","weatherId","clearday","clearnight","cloudsday","cloudsnight","rain","rainday","rainnight","storm","snow","smog","WeatherApp","state","part","weatherApiKey","weatherData","locationApiKey","locationData","cityList","chosenCityIndex","formsDisplay","currentWeatherDisplay","returnButtonDisplay","cityListDisplay","backgroundImage","startingBackgroundImage","handleChange","bind","handleCoordsCurrentWeatherSubmit","handleCityCurrentWeatherSubmit","handlePositionCurrentWeatherSubmit","handleReturnButton","handleCoordsForecastSubmit","handleCityForecastSubmit","handlePositionForecastSubmit","event","target","name","value","this","setState","preventDefault","weatherApiUrl","fetch","then","response","json","res","handleCoordsCurrentWeatherSubmit2","catch","err","console","log","locationApiUrl","handleCoordsCurrentWeatherSubmit3","results","components","assignCurrentWeatherParameters","handleCityCurrentWeatherSubmit2","forEach","placeIndex","_category","confidence","push","toLowerCase","town","village","_type","county","length","geometry","lng","fetchWeatherDataForCurrentWeather","cityListDisplayForCurrentWeather","alert","cities","index","onClick","handleChosenCityForCurrentWeather","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","handlePositionCurrentWeatherSubmit2","cWeather","current","icon","wind_deg","wind_speed","handleCoordsForecastSubmit2","error","handleCoordsForecastSubmit3","assignForecastParameters","handleCityForecastSubmit2","fetchWeatherDataForForecast","cityListDisplayForForecast","handleChosenCityForForecast","handlePositionForecastSubmit2","fWeather","daily","type","onChange","placeholder","required","list","id","step","React","Component","Footer","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.444aefb1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starting-bg.a2db74f2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear-day-bg.e6e20999.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear-night-bg.41a70beb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds-day-bg.c7da77ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds-night-bg.5082da6b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds-bg.f3e04661.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain-day-bg.6d903157.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain-night-bg.e4271727.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain-bg.0e4c237b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/smog-bg.b69e0130.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow-bg.8b7e32f5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm-bg.7a3cd651.png\";","function timestampToTime(timestamp) {\r\n  let dateObject = new Date(timestamp * 1000)\r\n  let hours = dateObject.getHours()\r\n  let minutes = dateObject.getMinutes()\r\n  if (minutes < 10) {\r\n    minutes = \"0\" + minutes\r\n  }\r\n  return (\r\n    hours + \":\" + minutes\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default timestampToTime","import React from \"react\"\r\n\r\nfunction getWeatherIcon(iconId) {\r\n  if (iconId === \"01d\") {\r\n    return (<i className=\"fas fa-sun fa-5x\"></i>)\r\n  } else if (iconId === \"01n\") {\r\n    return (<i className=\"fas fa-moon fa-5x\"></i>)\r\n  } else if (iconId === \"02d\") {\r\n    return (<i className=\"fas fa-cloud-sun fa-5x\"></i>)\r\n  } else if (iconId === \"02n\") {\r\n    return (<i className=\"fas fa-cloud-moon fa-5x\"></i>)\r\n  } else if (iconId === \"03d\" || iconId === \"03n\" || iconId === \"04d\" || iconId === \"04n\") {\r\n    return (<i className=\"fas fa-cloud fa-5x\"></i>)\r\n  } else if (iconId === \"09d\" || iconId === \"09n\") {\r\n    return (<i className=\"fas fa-cloud-showers-heavy fa-5x\"></i>)\r\n  } else if (iconId === \"10d\") {\r\n    return (<i className=\"fas fa-cloud-rain fa-5x\"></i>)\r\n  } else if (iconId === \"10n\") {\r\n    return (<i className=\"fas fa-cloud-moon-rain fa-5x\"></i>)\r\n  } else if (iconId === \"11d\" || iconId === \"11n\") {\r\n    return (<i className=\"fas fa-bolt fa-5x\"></i>)\r\n  } else if (iconId === \"13d\" || iconId === \"13n\") {\r\n    return (<i className=\"fas fa-snowflake fa-5x\"></i>)\r\n  } else if (iconId === \"50d\" || iconId === \"50n\") {\r\n    return (<i className=\"fas fa-smog fa-5x\"></i>)\r\n  }\r\n  return ('No icon')\r\n}\r\nexport default getWeatherIcon","function windDirection(deg) {\r\n  if (deg >= 337.5 || deg < 22.5) {\r\n    return \"N\"\r\n  } else if (deg < 67.5) {\r\n    return \"NE\"\r\n  } else if (deg < 112.5) {\r\n    return \"E\"\r\n  } else if (deg < 157.5) {\r\n    return \"SE\"\r\n  } else if (deg < 202.5) {\r\n    return \"S\"\r\n  } else if (deg < 247.5) {\r\n    return \"SW\"\r\n  } else if (deg < 292.5) {\r\n    return \"W\"\r\n  } else if (deg < 337.5) {\r\n    return \"NW\"\r\n  }\r\n}\r\n\r\nexport default windDirection","import React from \"react\"\r\nimport getWeatherIcon from \"../methods/getWeatherIcon\"\r\nimport windDirection from \"../methods/windDirection\"\r\n\r\nfunction CurrentWeatherDisplay(props) {\r\n  const {city, country, lat, long, currentWeather, currentDisplay} = props\r\n  if (currentWeather !== undefined){\r\n    let currentWeatherIcon = getWeatherIcon(currentWeather.iconId)\r\n\r\n  let place\r\n  if (city !== \"\") {\r\n    place = <div className = \"place-city\"><i className=\"fas fa-map-marker-alt\"></i> {city}, {country}</div>\r\n  }\r\n\r\n    return (\r\n      <div className = \"cw-display\" style = {{display:currentDisplay}}> \r\n      <div className = \"cw-title\">Current weather:</div>\r\n        <div className = \"cw-main\">\r\n          <div className = \"cw-representation\">\r\n            <div className = \"cw-icon\">{currentWeatherIcon}</div>      \r\n            <div className = \"cw-description\">{currentWeather.description}</div>\r\n          </div>\r\n          <div className = \"cw-temp\">\r\n            <div className = \"cw-temp-actual\">{currentWeather.temp}°C</div>\r\n            <div className = \"cw-temp-feels-like\">Feels like: <span className=\"feels-like-value\">{currentWeather.feels_like}°C</span></div>\r\n          </div>\r\n        </div>\r\n        <div className = \"cw-details\">\r\n          <div className = \"cw-humidity cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Humidity</div> \r\n            <div className = \"cw-detail-box-value\">{currentWeather.humidity}<span className = \"unit\">%</span></div> \r\n          </div>\r\n          <div className = \"cw-clouds cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Clouds</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.clouds}<span className = \"unit\">%</span></div>\r\n          </div>\r\n          <div className = \"cw-uvi cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">UVI</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.uvi}</div>\r\n          </div>\r\n          <div className = \"cw-visibility cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Visibility</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.visibility}<span className = \"unit\">km</span></div>\r\n          </div>\r\n          <div className = \"cw-wind cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Wind</div>\r\n            <div className = \"cw-detail-box-value wind-value\">\r\n              <div className = \"wind-speed\">{currentWeather.wind[1]}<span className = \"unit\">m/s</span></div> \r\n              <div className = \"wind-deg\">{currentWeather.wind[0]}°({windDirection(currentWeather.wind[0])})<span className = \"unit\"></span></div> \r\n            </div>\r\n          </div>\r\n          <div className = \"cw-pressure cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Pressure</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.pressure}<span className = \"unit\">hPa</span></div>\r\n          </div>\r\n          <div className = \"cw-sunrise cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Sunrise</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.sunrise}</div>\r\n          </div>\r\n          <div className = \"cw-sunset cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Sunset</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.sunset}</div>\r\n          </div>\r\n        </div>\r\n      \r\n      <div className = \"place\">\r\n        <div className = \"place-lat-long\">Latitude: {lat}, Longitude: {long}</div>\r\n        {place}\r\n      </div>\r\n    </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className = \"cw-display\" style={{display:currentDisplay}}> \r\n      </div>)\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default CurrentWeatherDisplay","function dayOfTheWeek(dayNumber) {\r\n  let days = {\r\n    0: \"Sunday\",\r\n    1: \"Monday\",\r\n    2: \"Tuesday\",\r\n    3: \"Wednesday\",\r\n    4: \"Thursday\",\r\n    5: \"Friday\",\r\n    6: \"Saturday\"\r\n  }\r\n  return(days[dayNumber])\r\n}\r\n\r\nexport default dayOfTheWeek","import React from \"react\"\r\nimport getWeatherIcon from \"../methods/getWeatherIcon\"\r\nimport dayOfTheWeek from \"../methods/dayOfTheWeek\"\r\n\r\nfunction ForecastDay(props) {\r\n  const {day, temp, weather, iconId, humidity, today} = props\r\n  let weatherIcon = getWeatherIcon(iconId)\r\n\r\n  let whichDay\r\n  if (day === 0) {\r\n    whichDay = \"Today\"\r\n  } else {\r\n    whichDay = dayOfTheWeek((today + day) % 7)\r\n  }\r\n\r\n  let humidityIcon \r\n  if (humidity === 0) {\r\n    humidityIcon = <i className=\"fas fa-tint-slash\"></i>\r\n  } else {\r\n    humidityIcon = <i className=\"fas fa-tint\"></i>\r\n  }\r\n  return(\r\n    <div className = \"fw-display-item\">\r\n      <div className = \"fw-day\">{whichDay}</div>\r\n      <div className = \"fw-representation\">\r\n        <div className = \"fw-icon\">{weatherIcon}</div>\r\n        <div className = \"fw-description\">{weather}</div>\r\n      </div>    \r\n      <div className = \"fw-details\">\r\n        <div className = \"fw-temp\">\r\n          <div className = \"fw-temp-day\"><i className=\"far fa-sun\"></i> {Math.round((temp.day - 273.15))}°C</div>\r\n          <div className = \"fw-temp-night\"><i className=\"far fa-moon\"></i> {Math.round(temp.night - 273.15)}°C</div>\r\n        </div>\r\n        <div className = \"fw-humidity\">{humidityIcon} {humidity}%</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ForecastDay","import React from \"react\"\r\nimport ForecastDay from \"./ForecastDay\"\r\n\r\nfunction ForecastDisplay(props) {\r\n  const {city, country, lat, long, forecastDisplay, forecastWeather} = props\r\n  const today = (new Date()).getDay()\r\n  \r\n  let place\r\n  if (city !== \"\") {\r\n    place = <div className=\"place-city\"><i className=\"fas fa-map-marker-alt\"></i> {city}, {country}</div>\r\n  }\r\n\r\n  if (forecastWeather !== undefined) {\r\n    const display = forecastWeather.map(day => \r\n      <ForecastDay \r\n        key = {day.dayIndex} \r\n        day = {day.dayIndex} \r\n        temp = {day.temp} \r\n        weather = {day.weather} \r\n        iconId = {day.iconId} \r\n        humidity = {day.humidity} \r\n        today = {today}\r\n        />)\r\n    return (\r\n      <div className = \"fw-display\" style = {{display:forecastDisplay}}>\r\n        <div className = \"fw-display-title\">\r\n          Seven Day Forecast\r\n        </div>\r\n        <div className = \"fw-results\">\r\n          {display}\r\n        </div>\r\n        <div className = \"place\">\r\n          <div className = \"place-lat-long\">Latitude: {lat}, Longitude: {long}</div>\r\n          {place}\r\n        </div>\r\n      </div>\r\n  )\r\n  } else {\r\n    return (\r\n      <div className = \"fw-weather-display\" style = {{display:forecastDisplay}}> \r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default ForecastDisplay","import clearday from \"../images/clear-day-bg.jpg\"\r\nimport clearnight from \"../images/clear-night-bg.jpg\"\r\nimport cloudsday from \"../images/clouds-day-bg.jpg\"\r\nimport cloudsnight from \"../images/clouds-night-bg.jpg\"\r\nimport clouds from \"../images/clouds-bg.jpg\"\r\nimport rainday from \"../images/rain-day-bg.jpg\"\r\nimport rainnight from \"../images/rain-night-bg.jpg\"\r\nimport rain from \"../images/rain-bg.jpg\"\r\nimport smog from \"../images/smog-bg.jpg\"\r\nimport snow from \"../images/snow-bg.jpg\"\r\nimport storm from \"../images/storm-bg.png\"\r\n\r\n\r\nfunction getBackgroundImage(weatherId) {\r\n  if (weatherId === \"01d\") {\r\n    return (clearday)\r\n  } else if (weatherId === \"01n\") {\r\n    return (clearnight)\r\n  } else if (weatherId === \"02d\") {\r\n    return (cloudsday)\r\n  } else if (weatherId === \"02n\") {\r\n    return (cloudsnight)\r\n  } else if (weatherId === \"03d\" || weatherId === \"03n\" || weatherId === \"04d\" || weatherId === \"04n\") {\r\n    return (clouds)\r\n  } else if (weatherId === \"09d\" || weatherId === \"09n\") {\r\n    return (rain)\r\n  } else if (weatherId === \"10d\") {\r\n    return (rainday)\r\n  } else if (weatherId === \"10n\") {\r\n    return (rainnight)\r\n  } else if (weatherId === \"11d\" || weatherId === \"11n\") {\r\n    return (storm)\r\n  } else if (weatherId === \"13d\" || weatherId === \"13n\") {\r\n    return (snow)\r\n  } else if (weatherId === \"50d\" || weatherId === \"50n\") {\r\n    return (smog)\r\n  }\r\n  return ('No icon')\r\n}\r\n\r\nexport default getBackgroundImage","import React from \"react\"\r\nimport timestampToTime from \"../methods/timestampToTime\"\r\nimport CurrentWeatherDisplay from \"./CurrentWeatherDisplay\"\r\nimport ForecastDisplay from \"./ForecastDisplay\"\r\nimport startingBackgroundImage from \"../images/starting-bg.jpg\"\r\nimport getBackgroundImage from \"../methods/getBackgroundImage\"\r\n\r\nclass WeatherApp extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      lat: \"0\", //latitude\r\n      long: \"0\", //longitude\r\n      city: \"\", //City, town or village\r\n      state: \"\",\r\n      country: \"\",\r\n      part: \"minutely,hourly\", //Excludes parts of weather data. Available values: \"current\", \"minutely\", \"hourly\", \"daily\", \"alerts\". Seperated by comma without spaces\r\n      weatherApiKey: \"692d3bd12adf77c08728b7324d9f2b14\", //API key for OpenWeatherMapAPI\r\n      weatherData: undefined, //data pulled from weather API\r\n      currentWeather: undefined,\r\n      forecastWeather: undefined,\r\n      locationApiKey: \"44f5f3ce977746e7ab89ddeae84b48d3\", //API key for openCageData\r\n      locationData: undefined, //data pulled from location API\r\n      cityList: <div className=\"city-list-items\"></div>,\r\n      chosenCityIndex: \"\",\r\n      formsDisplay: \"flex\", //determines if forms section is visible\r\n      currentWeatherDisplay: \"none\", //determines if current weather section is visible\r\n      forecastDisplay: \"none\", //determines if forecast section is visible\r\n      returnButtonDisplay: \"none\", //determines if return button is visible\r\n      cityListDisplay: \"none\", //determines if city list section is visible\r\n      backgroundImage: startingBackgroundImage\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleCoordsCurrentWeatherSubmit = this.handleCoordsCurrentWeatherSubmit.bind(this)\r\n    this.handleCityCurrentWeatherSubmit = this.handleCityCurrentWeatherSubmit.bind(this)\r\n    this.handlePositionCurrentWeatherSubmit = this.handlePositionCurrentWeatherSubmit.bind(this)\r\n    this.handleReturnButton = this.handleReturnButton.bind(this)\r\n    this.handleCoordsForecastSubmit = this.handleCoordsForecastSubmit.bind(this)\r\n    this.handleCityForecastSubmit = this.handleCityForecastSubmit.bind(this)\r\n    this.handlePositionForecastSubmit = this.handlePositionForecastSubmit.bind(this)\r\n  }\r\n\r\n  //Handles change of all inputs in forms section.\r\n  handleChange(event) {\r\n    const {name, value} = event.target\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  //Handles submit of coords form (current weather). Fetches data from OpenWeatherMap API.\r\n  handleCoordsCurrentWeatherSubmit(event) {\r\n    event.preventDefault()\r\n    //URL string for weather API\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 180) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey\r\n    \r\n    //fetch weather API\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res\r\n        }, \r\n        this.handleCoordsCurrentWeatherSubmit2,\r\n        )\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n    }\r\n    \r\n  //Second part of coords form (current weather). Fetches data from OpenCageData API.\r\n  handleCoordsCurrentWeatherSubmit2() {\r\n    //URL string for reverse location API\r\n    let locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + (this.state.lat % 180) + \"+\" + (this.state.long % 180) + \"&key=\"  + this.state.locationApiKey  \r\n\r\n    console.log(locationApiUrl)\r\n\r\n    //fetch location API\r\n    fetch(locationApiUrl)\r\n    .then(response => response.json())\r\n    .then(res => {\r\n      this.setState({\r\n        locationData: res\r\n      },\r\n      this.handleCoordsCurrentWeatherSubmit3\r\n      )\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })      \r\n    \r\n  }\r\n  \r\n  //Third part of coords form (current weather). Sets city and country, if possible for entered coords.\r\n  handleCoordsCurrentWeatherSubmit3() {\r\n    let city, country\r\n\r\n    if (this.state.locationData.results[0].components.city !== undefined) {\r\n      city = this.state.locationData.results[0].components.city\r\n      country = this.state.locationData.results[0].components.country\r\n    } else {\r\n      city = \"\"\r\n      country = \"\"\r\n    }\r\n    \r\n    this.setState({\r\n      city: city,\r\n      country: country\r\n    }, this.assignCurrentWeatherParameters\r\n    )\r\n  }\r\n\r\n  //Handles submit of the city form (current weather). Fetches data from OpenCageData API.\r\n  handleCityCurrentWeatherSubmit(event) {\r\n    event.preventDefault()\r\n\r\n    let locationApiUrl\r\n    //URL string for forward location API\r\n    if (this.state.country === \"\"){\r\n      locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + this.state.city + \"&key=\" + this.state.locationApiKey\r\n    } else {\r\n      locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + this.state.city + \"%2C\" + this.state.country + \"&key=\" + this.state.locationApiKey \r\n    }\r\n\r\n    \r\n    fetch(locationApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {this.setState({\r\n        locationData: res\r\n    }, this.handleCityCurrentWeatherSubmit2)})\r\n  }\r\n\r\n  //Second part of the city form submit (current weather). Creates a list of places that match the city entered in the city form. If there are no matches it displays an alert, if there is one match it goes to assignCurrentWeatherParameters function, if there is more than one match it goes to cityListDisplayForCurrentWeather.\r\n  handleCityCurrentWeatherSubmit2() {    \r\n    let cityList = []\r\n\r\n    console.log(this.locationData)\r\n    this.state.locationData.results.forEach((place, placeIndex) => {\r\n      if (place.components._category === \"place\") {\r\n        if (place.confidence < 7) {\r\n          cityList.push(place)\r\n        } else if (place.components.city !== undefined) {\r\n          if (place.components.city.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components.town !== undefined) {\r\n          if (place.components.town.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components.village !== undefined) {\r\n          if (place.components.village.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components._type !== \"county\") {\r\n          if (place.components.county.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    if (cityList.length === 1) {\r\n      this.setState({\r\n        lat: this.state.locationData.results[0].geometry.lat,\r\n        long: this.state.locationData.results[0].geometry.lng,\r\n        country: this.state.locationData.results[0].components.country\r\n      }, this.fetchWeatherDataForCurrentWeather)\r\n    } else if (cityList.length > 1){\r\n      this.setState({\r\n        locationData: cityList,\r\n        cityListDisplay: \"flex\",\r\n        formsDisplay: \"none\",\r\n        returnButtonDisplay: \"flex\"\r\n      }, this.cityListDisplayForCurrentWeather)\r\n    } else {\r\n      alert(\"No results\")\r\n      this.setState({\r\n        city: \"\",\r\n        country: \"\"\r\n        })\r\n    }\r\n  }\r\n   \r\n  //Conditional (2.1) part of the city form submit (current weather). Creates a list of places that match the one entered in the form. \r\n  cityListDisplayForCurrentWeather() {\r\n    let cities = this.state.locationData.map((city, index) => {\r\n    if (city.components.city !== undefined) {\r\n      return(\r\n        <div key={index} className=\"city-list-item\">\r\n          <div className = \"city-name\">{city.components.city}</div>\r\n          <div className = \"city-details\">City in {city.components.state}, {city.components.country}</div>\r\n          <div className = \"city-coords\">\r\n            <div className = \"city-latitude\">Latitude: {Math.round((city.geometry.lat)*1000)/1000}</div>\r\n            <div className = \"city-longitude\">Longitude: {Math.round((city.geometry.lng)*1000)/1000}</div>\r\n          </div>\r\n          <button className = \"city-button\" onClick = {() => {this.setState({\r\n            chosenCityIndex: index\r\n          }, this.handleChosenCityForCurrentWeather)}}>This one</button>\r\n        </div>\r\n        )\r\n    } else if (city.components.town !==undefined) {\r\n      return(\r\n        <div key={index} className=\"city-list-item\">\r\n          <div className = \"city-name\">{city.components.town}</div>\r\n          <div className = \"city-details\">Town in {city.components.state}, {city.components.country}</div>\r\n          <div className = \"city-coords\">\r\n            <div className = \"city-latitude\">Latitude: {Math.round((city.geometry.lat)*1000)/1000}</div>\r\n            <div className = \"city-longitude\">Longitude: {Math.round((city.geometry.lng)*1000)/1000}</div>\r\n          </div>\r\n          <button className = \"city-button\" onClick = {() => {this.setState({\r\n            chosenCityIndex: index\r\n          }, this.handleChosenCityForCurrentWeather)}}>This one</button>\r\n        </div>)\r\n    } else if (city.components.village !==undefined) {\r\n      return(\r\n        <div key={index} className=\"city-list-item\">\r\n          <div className = \"city-name\">{city.components.village}</div>\r\n          <div className = \"city-details\">Village in {city.components.state}, {city.components.country}</div>\r\n          <div className = \"city-coords\">\r\n            <div className = \"city-latitude\">Latitude: {Math.round((city.geometry.lat)*1000)/1000}</div>\r\n            <div className = \"city-longitude\">Longitude: {Math.round((city.geometry.lng)*1000)/1000}</div>\r\n          </div>\r\n          <button className = \"city-button\" onClick = {() => {this.setState({\r\n            chosenCityIndex: index\r\n          }, this.handleChosenCityForCurrentWeather)}}>This one</button>\r\n        </div>)\r\n    } else if (city.components.county !== undefined) {\r\n      return(\r\n        <div key={index} className=\"city-list-item\">\r\n          <div className = \"city-name\">{city.components.county}</div>\r\n          <div className = \"city-details\">County in {city.components.state}, {city.components.country}</div>\r\n          <div className = \"city-coords\">\r\n            <div className = \"city-latitude\">Latitude: {Math.round((city.geometry.lat)*1000)/1000}</div>\r\n            <div className = \"city-longitude\">Longitude: {Math.round((city.geometry.lng)*1000)/1000}</div>\r\n          </div>\r\n          <button className = \"city-button\" onClick = {() => {this.setState({\r\n            chosenCityIndex: index\r\n          }, this.handleChosenCityForCurrentWeather)}}>This one</button>\r\n        </div>)\r\n    } \r\n\r\n    })\r\n\r\n    this.setState({\r\n      cityList: <div className=\"city-list-items\">{cities}</div>\r\n    })\r\n  }\r\n\r\n  //Conditional (2.2) part of the city form submit (current weather). Assigns coords and country of the city chosen from the list. Goes to fetchWeatherDataForCurrentWeather function.\r\n  handleChosenCityForCurrentWeather() {\r\n  this.setState({\r\n    lat: this.state.locationData[this.state.chosenCityIndex].geometry.lat,\r\n    long: this.state.locationData[this.state.chosenCityIndex].geometry.lng,\r\n    country: this.state.locationData[this.state.chosenCityIndex].components.country\r\n  }, this.fetchWeatherDataForCurrentWeather)\r\n  }\r\n\r\n  //Third part of the city form submit (current weather). Fetches data from OpenWeatherMap API. Goes to assignCurrentWeatherParameters function.\r\n  fetchWeatherDataForCurrentWeather() {  \r\n    //URL string for weather API\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 180) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey   \r\n    console.log(weatherApiUrl)\r\n    \r\n    //fetch weather API\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res,\r\n        }, this.assignCurrentWeatherParameters \r\n        )\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  //Handles submit of position form (current weather). Sets latitude and longitude based on current position of user.\r\n  handlePositionCurrentWeatherSubmit() {\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      this.setState({\r\n        lat: Math.round(position.coords.latitude * 1000) / 1000,\r\n        long: Math.round(position.coords.longitude *1000) / 1000\r\n      }, this.handlePositionCurrentWeatherSubmit2)\r\n    })\r\n  } \r\n\r\n  //Second part of position form (current weather)\r\n  handlePositionCurrentWeatherSubmit2() {\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 90) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey   \r\n\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res\r\n        }, this.assignCurrentWeatherParameters)\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n\r\n    console.log(weatherApiUrl)\r\n  }\r\n\r\n  //Last part of every form (current weather). Assigns current parameters pulled from API to this.state.currentWeather object. Changes view from forms to result display.\r\n  assignCurrentWeatherParameters() {\r\n    const {weatherData} = this.state\r\n    let cWeather = {}\r\n\r\n    //sets current temperature\r\n    cWeather.temp = Math.round((weatherData.current.temp - 273.15)*10) /10\r\n    cWeather.feels_like = Math.round((weatherData.current.feels_like - 273.15)*10) /10\r\n\r\n    //sets current sunrise and sunset\r\n    cWeather.sunrise = timestampToTime(weatherData.current.sunrise)\r\n    cWeather.sunset = timestampToTime(weatherData.current.sunset)\r\n    //sets current weather parameters\r\n    cWeather.description = weatherData.current.weather[0].description\r\n    cWeather.iconId = weatherData.current.weather[0].icon\r\n    cWeather.pressure = weatherData.current.pressure\r\n    cWeather.humidity = weatherData.current.humidity\r\n    cWeather.wind = [Math.round(weatherData.current.wind_deg), weatherData.current.wind_speed]\r\n    cWeather.clouds = weatherData.current.clouds\r\n    cWeather.uvi = weatherData.current.uvi\r\n    cWeather.visibility = weatherData.current.visibility / 1000\r\n\r\n\r\n    this.setState({\r\n      currentWeather: cWeather,\r\n      formsDisplay: \"none\",\r\n      currentWeatherDisplay: \"flex\",\r\n      returnButtonDisplay: \"flex\",\r\n      cityListDisplay: \"none\",\r\n      backgroundImage: getBackgroundImage(weatherData.current.weather[0].icon)\r\n    })\r\n\r\n  }\r\n\r\n  //Handles submit of latitude and longitude form (forecast weather). Fetches data from OpenWeatherMap API.\r\n  handleCoordsForecastSubmit(event) {\r\n    event.preventDefault()\r\n    //URL string for weather API\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 180) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey   \r\n    console.log(weatherApiUrl)\r\n    \r\n    //fetch weather API\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res\r\n        }, \r\n        this.handleCoordsForecastSubmit2,\r\n        )\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n      })\r\n  }\r\n    \r\n  //Second part of latitude and longitude form (forecast weather). Fetches data from OpenCageData API.\r\n  handleCoordsForecastSubmit2() {\r\n    //URL string for reverse location API\r\n    let locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + (this.state.lat % 180) + \"+\" + (this.state.long % 180) + \"&key=\"  + this.state.locationApiKey  \r\n\r\n    //fetch location API\r\n    fetch(locationApiUrl)\r\n    .then(response => response.json())\r\n    .then(res => {\r\n      this.setState({\r\n        locationData: res\r\n      },\r\n      this.handleCoordsForecastSubmit3\r\n      )\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })      \r\n    \r\n  }\r\n\r\n  //Third part of latitude and longitude form (forecast weather). Sets city and country, if possible for entered coords.\r\n  handleCoordsForecastSubmit3() {\r\n    let city, country\r\n\r\n    if (this.state.locationData.results[0].components.city !== undefined) {\r\n      city = this.state.locationData.results[0].components.city\r\n      country = this.state.locationData.results[0].components.country\r\n    } else {\r\n      city = \"\"\r\n      country = \"\"\r\n    }\r\n    \r\n    this.setState({\r\n      city: city,\r\n      country: country\r\n    }, this.assignForecastParameters\r\n    )\r\n  }\r\n\r\n  //Handles submit of the city form (current weather). Fetches data from OpenCageData API.\r\n  handleCityForecastSubmit(event) {\r\n    event.preventDefault()\r\n\r\n    let locationApiUrl\r\n    //URL string for forward location API\r\n    if (this.state.country === \"\"){\r\n      locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + this.state.city + \"&key=\" + this.state.locationApiKey\r\n    } else {\r\n      locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + this.state.city + \"%2C\" + this.state.country + \"&key=\" + this.state.locationApiKey \r\n    }\r\n    fetch(locationApiUrl)\r\n    .then(response => response.json())\r\n    .then(res => {this.setState({\r\n      locationData: res\r\n    }, this.handleCityForecastSubmit2)})\r\n\r\n    \r\n  }\r\n\r\n  //Second part of the city form submit (forecast). Creates a list of places that match the city entered in the city form. If there are no matches it displays an alert, if there is one match it goes to assignCurrentWeatherParameters function, if there is more than one match it goes to cityListDisplayForCurrentWeather.\r\n  handleCityForecastSubmit2() {    \r\n    let cityList = []\r\n\r\n    this.state.locationData.results.forEach((place, placeIndex) => {\r\n      if (place.components._category === \"place\") {\r\n        if (place.confidence < 7) {\r\n          cityList.push(place)\r\n        } else if (place.components.city !== undefined) {\r\n          if (place.components.city.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components.town !== undefined) {\r\n          if (place.components.town.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components.village !== undefined) {\r\n          if (place.components.village.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components._type !== \"county\") {\r\n          if (place.components.county.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    if (cityList.length === 1) {\r\n      this.setState({\r\n        lat: this.state.locationData.results[0].geometry.lat,\r\n        long: this.state.locationData.results[0].geometry.lng,\r\n        country: this.state.locationData.results[0].components.country\r\n      }, this.fetchWeatherDataForForecast)\r\n    } else if (cityList.length > 1){\r\n      this.setState({\r\n        locationData: cityList,\r\n        cityListDisplay: \"flex\",\r\n        formsDisplay: \"none\",\r\n        returnButtonDisplay: \"flex\"\r\n      }, this.cityListDisplayForForecast)\r\n    } else {\r\n      alert(\"No results\")\r\n      this.setState({\r\n        city: \"\",\r\n        country: \"\"\r\n        })\r\n    }\r\n  }\r\n   \r\n  //Conditional (2.1) part of the city form submit (forecast). Creates a list of places that match the one entered in the form. \r\n  cityListDisplayForForecast() {\r\n    let cities = this.state.locationData.map((city, index) => {\r\n    if (city.components.city !== undefined) {\r\n      return(\r\n        <div key={index} className=\"city-list-item\">\r\n          <div className = \"city-name\">{city.components.city}</div>\r\n          <div className = \"city-details\">City in {city.components.state}, {city.components.country}</div>\r\n          <div className = \"city-coords\">\r\n            <div className = \"city-latitude\">Latitude: {Math.round((city.geometry.lat)*1000)/1000}</div>\r\n            <div className = \"city-longitude\">Longitude: {Math.round((city.geometry.lng)*1000)/1000}</div>\r\n          </div>\r\n          <button className = \"city-button\" onClick = {() => {this.setState({\r\n            chosenCityIndex: index\r\n          }, this.handleChosenCityForForecast)}}>This one</button>\r\n        </div>\r\n        )\r\n    } else if (city.components.town !== undefined) {\r\n      return(\r\n        <div key={index} className=\"city-list-item\">\r\n          <div className = \"city-name\">{city.components.town}</div>\r\n          <div className = \"city-details\">Town in {city.components.state}, {city.components.country}</div>\r\n          <div className = \"city-coords\">\r\n            <div className = \"city-latitude\">Latitude: {Math.round((city.geometry.lat)*1000)/1000}</div>\r\n            <div className = \"city-longitude\">Longitude: {Math.round((city.geometry.lng)*1000)/1000}</div>\r\n          </div>\r\n          <button className = \"city-button\" onClick = {() => {this.setState({\r\n            chosenCityIndex: index\r\n          }, this.handleChosenCityForForecast)}}>This one</button>\r\n        </div>)\r\n    } else if (city.components.village !==undefined) {\r\n      return(\r\n        <div key={index} className=\"city-list-item\">\r\n          <div className = \"city-name\">{city.components.village}</div>\r\n          <div className = \"city-details\">Village in {city.components.state}, {city.components.country}</div>\r\n          <div className = \"city-coords\">\r\n            <div className = \"city-latitude\">Latitude: {Math.round((city.geometry.lat)*1000)/1000}</div>\r\n            <div className = \"city-longitude\">Longitude: {Math.round((city.geometry.lng)*1000)/1000}</div>\r\n          </div>\r\n          <button className = \"city-button\" onClick = {() => {this.setState({\r\n            chosenCityIndex: index\r\n          }, this.handleChosenCityForForecast)}}>This one</button>\r\n        </div>)\r\n    } else if (city.components.county !== undefined) {\r\n      return(\r\n        <div key={index} className=\"city-list-item\">\r\n          <div className = \"city-name\">{city.components.county}</div>\r\n          <div className = \"city-details\">County in {city.components.state}, {city.components.country}</div>\r\n          <div className = \"city-coords\">\r\n            <div className = \"city-latitude\">Latitude: {Math.round((city.geometry.lat)*1000)/1000}</div>\r\n            <div className = \"city-longitude\">Longitude: {Math.round((city.geometry.lng)*1000)/1000}</div>\r\n          </div>\r\n          <button className = \"city-button\" onClick = {() => {this.setState({\r\n            chosenCityIndex: index\r\n          }, this.handleChosenCityForForecast)}}>This one</button>\r\n        </div>)\r\n    } \r\n\r\n    })\r\n\r\n    this.setState({\r\n      cityList: <div className=\"city-list-items\">{cities}</div>\r\n    })\r\n  }\r\n\r\n  //Conditional (2.2) part of the city form submit (forecast). Assigns coords and country of the city chosen from the list. Goes to fetchWeatherDataForCurrentWeather function.\r\n  handleChosenCityForForecast() {\r\n  this.setState({\r\n    lat: this.state.locationData[this.state.chosenCityIndex].geometry.lat,\r\n    long: this.state.locationData[this.state.chosenCityIndex].geometry.lng,\r\n    country: this.state.locationData[this.state.chosenCityIndex].components.country\r\n  }, this.fetchWeatherDataForForecast)\r\n  }\r\n\r\n  //Third part of the city form submit (forecast). Fetches data from OpenWeatherMap API. Goes to assignCurrentWeatherParameters function.\r\n  fetchWeatherDataForForecast() {  \r\n    //URL string for weather API\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 180) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey   \r\n    console.log(weatherApiUrl)\r\n    \r\n    //fetch weather API\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res,\r\n        }, this.assignForecastParameters \r\n        )\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  //Handles submit of position form (forecast). Sets latitude and longitude based on forecast position of user.\r\n  handlePositionForecastSubmit() {\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      this.setState({\r\n        lat: Math.round(position.coords.latitude * 1000) / 1000,\r\n        long: Math.round(position.coords.longitude *1000) / 1000\r\n      }, this.handlePositionForecastSubmit2)\r\n    })\r\n  }\r\n\r\n  //Second part of position form (forecast)\r\n  handlePositionForecastSubmit2() {\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 90) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey   \r\n\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res\r\n        }, this.assignForecastParameters)\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n\r\n    console.log(weatherApiUrl)\r\n  }\r\n\r\n  //Last part of every form (forecast). Assigns forecast parameters pulled from API to this.state.forecastWeather object. Changes view from forms to result display.\r\n  assignForecastParameters() {\r\n    const {weatherData} = this.state\r\n    let fWeather = []\r\n    \r\n    weatherData.daily.forEach((day,index) => {\r\n      fWeather.push({\r\n        dayIndex: index,\r\n        temp: day.temp,\r\n        weather: day.weather[0].description,\r\n        iconId: day.weather[0].icon,\r\n        humidity: day.humidity\r\n      })\r\n    })\r\n\r\n    this.setState({\r\n      forecastWeather: fWeather,\r\n      formsDisplay: \"none\",\r\n      forecastDisplay: \"flex\",\r\n      returnButtonDisplay: \"flex\",\r\n      cityListDisplay: \"none\",\r\n      backgroundImage: getBackgroundImage(weatherData.current.weather[0].icon)\r\n    })\r\n\r\n  }\r\n\r\n  //Handles Return button click.\r\n  handleReturnButton(event) {\r\n    this.setState({\r\n      lat: 0,\r\n      long: 0,\r\n      city: \"\",\r\n      country: \"\",\r\n      formsDisplay: \"flex\",\r\n      currentWeatherDisplay: \"none\",\r\n      forecastDisplay: \"none\",\r\n      returnButtonDisplay: \"none\",\r\n      cityListDisplay: \"none\",\r\n      backgroundImage: startingBackgroundImage\r\n    })\r\n    event.preventDefault()\r\n  }\r\n\r\n  render() {\r\n    const {city, country, lat, long, currentWeatherDisplay, formsDisplay, returnButtonDisplay, currentWeather, forecastWeather, forecastDisplay, cityListDisplay, cityList, backgroundImage} = this.state\r\n   \r\n    return (\r\n      <div className = \"weather-app\" style={{backgroundImage:`url(${backgroundImage})`}}>\r\n        <button \r\n          onClick = {this.handleReturnButton} \r\n          style = {{display:returnButtonDisplay}} \r\n          className = \"return-button\">\r\n            <span className=\"return-icon\"><i className = \"fas fa-arrow-left\"></i></span>\r\n            <span className = \"return-text\">Return</span>\r\n        </button>\r\n        <div className = \"forms\" style = {{display:formsDisplay}}>\r\n          <div className = \"forms-title\">EveryWeather</div>\r\n          <div className = \"forms-desc\">Get weather data for any place!</div>\r\n          <div className = \"position-form\">\r\n            <div className = \"submit-buttons\">\r\n              <button onClick = {this.handlePositionCurrentWeatherSubmit} className = \"current-weather-button\">Get current weather for your position</button>          \r\n              <button onClick = {this.handlePositionForecastSubmit} className = \"forecast-weather-button\">Get seven day forecast for your position</button>          \r\n            </div>\r\n          </div>\r\n          <h1 className = \"or\">OR</h1>\r\n          <div className = \"city-form\">\r\n            <form>\r\n              <label>\r\n                Search by the name of a place:\r\n              </label>\r\n              <div className = \"city-country-inputs\">\r\n                <div className = \"city-input\">\r\n                <input \r\n                  type=\"text\"                  \r\n                  name=\"city\"\r\n                  value = {city}\r\n                  onChange = {this.handleChange}\r\n                  placeholder = \"City\"\r\n                  required/> \r\n                </div>\r\n                <div className = \"country-input\">\r\n                  <input \r\n                    type = \"text\" \r\n                    list = \"country\" \r\n                    value = {this.state.country}\r\n                    name = \"country\"\r\n                    onChange = {this.handleChange}\r\n                    placeholder = \"Country*\"\r\n                    />\r\n                  <datalist id = \"country\">\r\n                    <option value = \"\">Country*</option>\r\n                    <option>Australia</option>\r\n                    <option>Brazil</option>\r\n                    <option>China</option>\r\n                    <option>France</option>\r\n                    <option>Germany</option>\r\n                    <option>Ireland</option>\r\n                    <option>Japan</option>\r\n                    <option>Poland</option>\r\n                    <option>Portugal</option>\r\n                    <option>Russia</option>\r\n                    <option>Spain</option>\r\n                    <option>Sweden</option>\r\n                    <option>United Kingdom</option>\r\n                    <option>United%20States</option>\r\n                  </datalist>\r\n                </div>\r\n              </div>\r\n              <p>*You may specify a country to help narrow the results, though it's not required.</p>\r\n              <div className=\"submit-buttons\">\r\n                <button onClick={this.handleCityCurrentWeatherSubmit} className=\"current-weather-button\">Get current weather</button>\r\n                <button onClick={this.handleCityForecastSubmit} className=\"forecast-weather-button\">Get seven day forecast</button>\r\n              </div>\r\n          </form>\r\n          </div>\r\n          <h1 className=\"or\">OR</h1>\r\n          \r\n          <div className=\"lat-long-form\">\r\n            <form>\r\n              <label>\r\n                Enter latitude:\r\n              </label>\r\n              <input \r\n                type = \"number\"\r\n                step = \"0.001\"\r\n                name = \"lat\"\r\n                value = {lat}\r\n                onChange = {this.handleChange}\r\n                required/> \r\n              <label>\r\n                Enter longitude:\r\n              </label>\r\n              <input \r\n                type = \"number\"\r\n                step = \"0.001\"\r\n                name = \"long\"\r\n                value = {long}\r\n                onChange = {this.handleChange}\r\n                required/> \r\n              <div className=\"submit-buttons\">\r\n                <button onClick = {this.handleCoordsCurrentWeatherSubmit} className=\"current-weather-button\">Get current weather</button>\r\n                <button onClick = {this.handleCoordsForecastSubmit} className=\"forecast-weather-button\">Get seven day forecast</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        <CurrentWeatherDisplay \r\n          city = {city}\r\n          country = {country}\r\n          lat = {lat}\r\n          long = {long}\r\n          currentDisplay = {currentWeatherDisplay}\r\n          currentWeather = {currentWeather}\r\n          />\r\n        <ForecastDisplay \r\n          city = {city}\r\n          country = {country}\r\n          lat = {lat}\r\n          long = {long}\r\n          forecastDisplay = {forecastDisplay}\r\n          forecastWeather = {forecastWeather}\r\n          />\r\n        \r\n        <div className=\"city-list\" style = {{display:cityListDisplay}}>\r\n          <div className = \"city-list-title\">Which place did you have in mind?</div>\r\n          {cityList}\r\n        </div>\r\n\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherApp","import React from \"react\"\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n      <div>\r\n        Developed by Aleksander Gralewski, 2020\r\n      </div>\r\n      <div className=\"social-icons\">\r\n        <a href=\"https://github.com/AlexGralewski\"><i className=\"fab fa-github\"></i></a>\r\n        <a href=\"https://www.linkedin.com/in/aleksander-gralewski-1a01a7185/\"><i className=\"fab fa-linkedin-in\"></i></a>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\n\r\nimport WeatherApp from \"./components/WeatherApp\"\r\nimport Footer from \"./components/Footer\"\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <WeatherApp />\r\n      <Footer />      \r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}