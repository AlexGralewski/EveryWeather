{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aleksander.DESKTOP-LAALHEM\\\\Desktop\\\\React\\\\weather-app\\\\src\\\\components\\\\WeatherApp.js\";\nimport React from \"react\";\nimport timestampToTime from \"../data/timestampToTime\";\nimport CurrentWeatherDisplay from \"./CurrentWeatherDisplay\";\nimport cities from \"../data/cities\";\n\nclass WeatherApp extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      lat: \"52.24\",\n      //latitude\n      long: \"21.02\",\n      //longitude\n      city: \"\",\n      //city of choice\n      country: \"\",\n      part: \"minutely,hourly\",\n      //Excludes parts of weather data. Available values: \"current\", \"minutely\", \"hourly\", \"daily\", \"alerts\". Seperated by comma without spaces\n      weatherApiKey: \"692d3bd12adf77c08728b7324d9f2b14\",\n      //API key for OpenWeatherMapAPI\n      weatherData: undefined,\n      //data pulled from weather API\n      locationApiKey: \"44f5f3ce977746e7ab89ddeae84b48d3\",\n      //API key for openCageData\n      locationData: undefined //data pulled from location API\n\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleLatLongSubmit = this.handleLatLongSubmit.bind(this);\n    this.handleCitySubmit = this.handleCitySubmit.bind(this);\n    this.handleLocationSubmit = this.handleLocationSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleLatLongSubmit(event) {\n    event.preventDefault(); //URL string for weather API\n\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + this.state.lat % 180 + \"&lon=\" + this.state.long % 180 + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey;\n    console.log(weatherApiUrl);\n    let locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + this.state.lat % 180 + \"+\" + this.state.long % 180 + \"&key=\" + this.state.locationApiKey;\n    console.log(locationApiUrl); //fetch weather API\n\n    fetch(weatherApiUrl).then(response => response.json()).then(res => {\n      this.setState({\n        weatherData: res\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n    fetch(locationApiUrl).then(response => response.json()).then(res => {\n      this.setState({\n        locationData: res\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n    this.setState({\n      city: \"\"\n    });\n  }\n\n  handleCitySubmit(event) {\n    event.preventDefault();\n    let cityIndex;\n\n    for (cityIndex = 0; cityIndex < cities.length; cityIndex++) {\n      if (cities[cityIndex].city === \"warsaw\") {\n        this.setState({\n          lat: cities[cityIndex].lat,\n          long: cities[cityIndex].long\n        });\n      }\n    } //URL string for weather API\n\n\n    let apiURL = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + this.state.lat % 180 + \"&lon=\" + this.state.long % 180 + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey;\n    console.log(apiURL); //fetch API\n\n    fetch(apiURL).then(response => response.json()).then(res => {\n      this.setState({\n        data: res\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  handleLocationSubmit(event) {\n    event.preventDefault();\n\n    function success(pos) {\n      var crd = pos.coords;\n      console.log(pos.coords.latitude);\n      console.log('Your current position is:');\n      console.log(`Latitude : ${crd.latitude}`);\n      console.log(`Longitude: ${crd.longitude}`);\n    }\n\n    let position = navigator.geolocation.getCurrentPosition(position => {\n      return position.coords.latitude;\n    });\n    console.log(position);\n  }\n\n  render() {\n    const {\n      city,\n      lat,\n      long,\n      weatherData,\n      locationData\n    } = this.state;\n    let current = {}; //assigning weather parameters\n\n    if (weatherData !== undefined) {\n      //set current temperature\n      current.temp = Math.round(weatherData.current.temp - 273.15); //set current sunrise and sunset\n\n      current.sunrise = timestampToTime(weatherData.current.sunrise);\n      current.sunset = timestampToTime(weatherData.current.sunset); //set current weather\n\n      current.description = weatherData.current.weather[0].description;\n      current.iconId = weatherData.current.weather[0].icon;\n    }\n\n    console.log(current);\n\n    if (locationData !== undefined) {\n      const cityL = locationData.results[0].components.city;\n      const countryL = locationData.results[0].components.country;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"weather-app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forms\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lat-long-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleLatLongSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 15\n      }\n    }, \"Enter latitude:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 32\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      step: \"0.001\",\n      name: \"lat\",\n      value: lat,\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }, \"Enter longitude: \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 34\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      step: \"0.001\",\n      name: \"long\",\n      value: long,\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, \"Get current weather\"))), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }\n    }, \"OR\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"city-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleCitySubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, \"Enter a name of \", /*#__PURE__*/React.createElement(\"div\", {\n      class: \"alert alert-success\",\n      role: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      class: \"alert-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      class: \"mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    })), \" city:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"city-country-inputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"city\",\n      value: city,\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.country,\n      name: \"country\",\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 19\n      }\n    }, \"Country\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"poland\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 19\n      }\n    }, \"Poland\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"england\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 19\n      }\n    }, \"England\")))), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }, \"Get current weather\"))), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }\n    }, \"OR\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"this-location-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleLocationSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, \"Get current weather from your location\"))), /*#__PURE__*/React.createElement(CurrentWeatherDisplay, {\n      city: city,\n      lat: lat,\n      long: long,\n      currentTemp: current.temp,\n      currentDescription: current.description,\n      currentIconId: current.iconId,\n      currentSunrise: current.sunrise,\n      currentSunset: current.sunset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default WeatherApp;","map":{"version":3,"sources":["C:/Users/Aleksander.DESKTOP-LAALHEM/Desktop/React/weather-app/src/components/WeatherApp.js"],"names":["React","timestampToTime","CurrentWeatherDisplay","cities","WeatherApp","Component","constructor","state","lat","long","city","country","part","weatherApiKey","weatherData","undefined","locationApiKey","locationData","handleChange","bind","handleLatLongSubmit","handleCitySubmit","handleLocationSubmit","event","name","value","target","setState","preventDefault","weatherApiUrl","console","log","locationApiUrl","fetch","then","response","json","res","catch","err","cityIndex","length","apiURL","data","success","pos","crd","coords","latitude","longitude","position","navigator","geolocation","getCurrentPosition","render","current","temp","Math","round","sunrise","sunset","description","weather","iconId","icon","cityL","results","components","countryL"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport timestampToTime from \"../data/timestampToTime\"\r\nimport CurrentWeatherDisplay from \"./CurrentWeatherDisplay\"\r\nimport cities from \"../data/cities\"\r\n\r\nclass WeatherApp extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      lat: \"52.24\", //latitude\r\n      long: \"21.02\", //longitude\r\n      city: \"\", //city of choice\r\n      country: \"\",\r\n      part: \"minutely,hourly\", //Excludes parts of weather data. Available values: \"current\", \"minutely\", \"hourly\", \"daily\", \"alerts\". Seperated by comma without spaces\r\n      weatherApiKey: \"692d3bd12adf77c08728b7324d9f2b14\", //API key for OpenWeatherMapAPI\r\n      weatherData: undefined, //data pulled from weather API\r\n      locationApiKey: \"44f5f3ce977746e7ab89ddeae84b48d3\", //API key for openCageData\r\n      locationData: undefined, //data pulled from location API\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleLatLongSubmit = this.handleLatLongSubmit.bind(this)\r\n    this.handleCitySubmit = this.handleCitySubmit.bind(this)\r\n    this.handleLocationSubmit = this.handleLocationSubmit.bind(this)\r\n  }\r\n\r\n\r\n  handleChange(event) {\r\n    const {name, value} = event.target\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  handleLatLongSubmit(event) {\r\n    event.preventDefault()\r\n\r\n    //URL string for weather API\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 180) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey   \r\n    console.log(weatherApiUrl)\r\n    let locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + (this.state.lat % 180) + \"+\" + (this.state.long % 180) + \"&key=\"  + this.state.locationApiKey  \r\n    console.log(locationApiUrl)\r\n    //fetch weather API\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({weatherData: res})\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n    \r\n    fetch(locationApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({locationData: res})\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })      \r\n    this.setState({\r\n      city: \"\"\r\n    })\r\n  }\r\n\r\n\r\n\r\n  handleCitySubmit(event) {\r\n    event.preventDefault()\r\n    \r\n    let cityIndex\r\n    for (cityIndex = 0; cityIndex < cities.length; cityIndex++) {\r\n      if (cities[cityIndex].city === \"warsaw\") {\r\n        this.setState({\r\n          lat: cities[cityIndex].lat,\r\n          long: cities[cityIndex].long\r\n        })\r\n      }\r\n    }\r\n\r\n    //URL string for weather API\r\n    let apiURL = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 180) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey\r\n    console.log(apiURL)\r\n\r\n    //fetch API\r\n    fetch(apiURL)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({data: res});\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });   \r\n  }\r\n\r\n  handleLocationSubmit(event) {\r\n    event.preventDefault()\r\n\r\n    function success(pos) {\r\n      var crd = pos.coords;\r\n      console.log(pos.coords.latitude)\r\n      console.log('Your current position is:');\r\n      console.log(`Latitude : ${crd.latitude}`);\r\n      console.log(`Longitude: ${crd.longitude}`);\r\n    }\r\n\r\n    let position = navigator.geolocation.getCurrentPosition(position => { \r\n      return (position.coords.latitude)\r\n    })\r\n    \r\n    console.log(position)\r\n  }\r\n\r\n  render() {\r\n    const {city, lat, long, weatherData, locationData} = this.state\r\n    let current = {}\r\n    \r\n    //assigning weather parameters\r\n    if (weatherData !== undefined) {\r\n      //set current temperature\r\n      current.temp = Math.round(weatherData.current.temp - 273.15)\r\n      //set current sunrise and sunset\r\n      current.sunrise = timestampToTime(weatherData.current.sunrise)\r\n      current.sunset = timestampToTime(weatherData.current.sunset)\r\n      //set current weather\r\n      current.description = weatherData.current.weather[0].description\r\n      current.iconId = weatherData.current.weather[0].icon\r\n    } \r\n    console.log(current)\r\n\r\n    if (locationData !== undefined) {\r\n        const cityL = locationData.results[0].components.city\r\n        const countryL = locationData.results[0].components.country\r\n\r\n      }\r\n\r\n\r\n    return (\r\n      <div className=\"weather-app\">\r\n        <div className=\"forms\">\r\n          <div className=\"lat-long-form\">\r\n            <form onSubmit={this.handleLatLongSubmit}>\r\n              <label>\r\n                Enter latitude:<br />\r\n                <input \r\n                  type=\"number\"\r\n                  step=\"0.001\"\r\n                  name=\"lat\"\r\n                  value={lat}\r\n                  onChange={this.handleChange}\r\n                  required/> \r\n              </label>\r\n              <label>\r\n                Enter longitude: <br />\r\n                <input \r\n                  type=\"number\"\r\n                  step=\"0.001\"\r\n                  name=\"long\"\r\n                  value={long}\r\n                  onChange={this.handleChange}\r\n                  required/> \r\n              </label>\r\n              <button>Get current weather</button>\r\n            </form>\r\n          </div>\r\n          <h1>OR</h1>\r\n          <div className=\"city-form\">\r\n            <form onSubmit={this.handleCitySubmit}>\r\n            <label>\r\n              Enter a name of <div class=\"alert alert-success\" role=\"alert\">\r\n                <h4 class=\"alert-heading\"></h4>\r\n                <p></p>\r\n                <p class=\"mb-0\"></p>\r\n              </div> city:\r\n              <div className=\"city-country-inputs\">\r\n                <input \r\n                  type=\"text\"\r\n                  name=\"city\"\r\n                  value = {city}\r\n                  onChange={this.handleChange}\r\n                  required/> \r\n                <select\r\n                  value={this.state.country}\r\n                  name=\"country\"\r\n                  onChange = {this.handleChange}\r\n                  required>\r\n                  <option value=\"\">Country</option>\r\n                  <option value=\"poland\">Poland</option>\r\n                  <option value=\"england\">England</option>\r\n                </select>\r\n              </div>\r\n            </label>\r\n            <button>Get current weather</button>\r\n          </form>\r\n          </div>\r\n          <h1>OR</h1>\r\n          <div className=\"this-location-form\">\r\n            <button onClick={this.handleLocationSubmit}>Get current weather from your location</button>          \r\n          </div>\r\n        </div>\r\n\r\n        <CurrentWeatherDisplay \r\n          city={city}\r\n          lat={lat}\r\n          long={long}\r\n          currentTemp = {current.temp}\r\n          currentDescription = {current.description}\r\n          currentIconId = {current.iconId}\r\n          currentSunrise = {current.sunrise}\r\n          currentSunset = {current.sunset}\r\n          />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherApp"]},"metadata":{},"sourceType":"module"}