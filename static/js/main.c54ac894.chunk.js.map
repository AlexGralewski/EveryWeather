{"version":3,"sources":["images/starting-bg-winter.jpg","images/starting-bg-spring.jpg","images/starting-bg-summer.jpg","images/starting-bg-fall.jpg","images/clear-day-bg.jpg","images/clear-night-bg.jpg","images/clouds-day-bg.jpg","images/clouds-night-bg.jpg","images/clouds-bg.jpg","images/rain-day-bg.jpg","images/rain-night-bg.jpg","images/rain-bg.jpg","images/smog-bg.jpg","images/snow-bg.jpg","images/storm-bg.png","images/snowflake.svg","methods/timestampToTime.js","methods/getWeatherIcon.js","methods/windDirection.js","components/CurrentWeatherDisplay.js","methods/dayOfTheWeek.js","components/ForecastDay.js","components/ForecastDisplay.js","methods/startingBackgroundImage.js","methods/getBackgroundImage.js","components/WeatherApp.js","components/Footer.js","App.js","index.js"],"names":["module","exports","timestampToTime","timestamp","dateObject","Date","hours","getHours","minutes","getMinutes","getWeatherIcon","iconId","className","windDirection","deg","CurrentWeatherDisplay","props","city","country","lat","long","currentWeather","currentDisplay","undefined","place","currentWeatherIcon","style","display","description","temp","feels_like","humidity","clouds","uvi","visibility","wind","pressure","sunrise","sunset","dayOfTheWeek","dayNumber","0","1","2","3","4","5","6","ForecastDay","whichDay","humidityIcon","day","weather","today","weatherIcon","Math","round","night","ForecastDisplay","forecastDisplay","forecastWeather","getDay","map","key","dayIndex","startingBackgroundImage","cMonth","getMonth","startingImageWinter","startingImageSpring","startingImageSummer","startingImageFall","getBackgroundImage","weatherId","clearday","clearnight","cloudsday","cloudsnight","rain","rainday","rainnight","storm","snow","smog","WeatherApp","state","part","weatherApiKey","weatherData","locationApiKey","locationData","cityList","chosenCityIndex","formsDisplay","currentWeatherDisplay","returnButtonDisplay","cityListDisplay","loadingScreen","startingScreen","backgroundImage","handleChange","bind","handleCoordsCurrentWeatherSubmit","handleCityCurrentWeatherSubmit","handlePositionCurrentWeatherSubmit","handleReturnButton","handleCoordsForecastSubmit","handleCityForecastSubmit","handlePositionForecastSubmit","setTimeout","setState","event","target","name","value","this","preventDefault","weatherApiUrl","fetch","then","response","json","res","handleCoordsCurrentWeatherSubmit2","catch","err","console","log","locationApiUrl","handleCoordsCurrentWeatherSubmit3","results","components","assignCurrentWeatherParameters","handleCityCurrentWeatherSubmit2","forEach","placeIndex","_category","confidence","push","toLowerCase","town","village","_type","county","length","geometry","lng","fetchWeatherDataForCurrentWeather","cityListDisplayForCurrentWeather","alert","cities","index","onClick","handleChosenCityForCurrentWeather","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","handlePositionCurrentWeatherSubmit2","cWeather","current","icon","wind_deg","wind_speed","handleCoordsForecastSubmit2","error","handleCoordsForecastSubmit3","assignForecastParameters","handleCityForecastSubmit2","fetchWeatherDataForForecast","cityListDisplayForForecast","handleChosenCityForForecast","handlePositionForecastSubmit2","fWeather","daily","id","enable-background","height","viewBox","width","xmlns","d","fill","class","type","onChange","placeholder","required","list","step","React","Component","Footer","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c54ac894.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starting-bg-winter.f4e0dc03.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starting-bg-spring.139cfbfd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starting-bg-summer.551cff50.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starting-bg-fall.ae6d4977.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear-day-bg.e6e20999.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clear-night-bg.41a70beb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds-day-bg.c7da77ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds-night-bg.5082da6b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds-bg.f3e04661.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain-day-bg.6d903157.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain-night-bg.e4271727.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain-bg.0e4c237b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/smog-bg.b69e0130.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow-bg.8b7e32f5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm-bg.7a3cd651.png\";","module.exports = __webpack_public_path__ + \"static/media/snowflake.0f0243b4.svg\";","function timestampToTime(timestamp) {\r\n  let dateObject = new Date(timestamp * 1000)\r\n  let hours = dateObject.getHours()\r\n  let minutes = dateObject.getMinutes()\r\n  if (minutes < 10) {\r\n    minutes = \"0\" + minutes\r\n  }\r\n  return (\r\n    hours + \":\" + minutes\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default timestampToTime","import React from \"react\"\r\n\r\nfunction getWeatherIcon(iconId) {\r\n  if (iconId === \"01d\") {\r\n    return (<i className=\"fas fa-sun fa-5x\"></i>)\r\n  } else if (iconId === \"01n\") {\r\n    return (<i className=\"fas fa-moon fa-5x\"></i>)\r\n  } else if (iconId === \"02d\") {\r\n    return (<i className=\"fas fa-cloud-sun fa-5x\"></i>)\r\n  } else if (iconId === \"02n\") {\r\n    return (<i className=\"fas fa-cloud-moon fa-5x\"></i>)\r\n  } else if (iconId === \"03d\" || iconId === \"03n\" || iconId === \"04d\" || iconId === \"04n\") {\r\n    return (<i className=\"fas fa-cloud fa-5x\"></i>)\r\n  } else if (iconId === \"09d\" || iconId === \"09n\") {\r\n    return (<i className=\"fas fa-cloud-showers-heavy fa-5x\"></i>)\r\n  } else if (iconId === \"10d\") {\r\n    return (<i className=\"fas fa-cloud-rain fa-5x\"></i>)\r\n  } else if (iconId === \"10n\") {\r\n    return (<i className=\"fas fa-cloud-moon-rain fa-5x\"></i>)\r\n  } else if (iconId === \"11d\" || iconId === \"11n\") {\r\n    return (<i className=\"fas fa-bolt fa-5x\"></i>)\r\n  } else if (iconId === \"13d\" || iconId === \"13n\") {\r\n    return (<i className=\"fas fa-snowflake fa-5x\"></i>)\r\n  } else if (iconId === \"50d\" || iconId === \"50n\") {\r\n    return (<i className=\"fas fa-smog fa-5x\"></i>)\r\n  }\r\n  return ('No icon')\r\n}\r\nexport default getWeatherIcon","function windDirection(deg) {\r\n  if (deg >= 337.5 || deg < 22.5) {\r\n    return \"N\"\r\n  } else if (deg < 67.5) {\r\n    return \"NE\"\r\n  } else if (deg < 112.5) {\r\n    return \"E\"\r\n  } else if (deg < 157.5) {\r\n    return \"SE\"\r\n  } else if (deg < 202.5) {\r\n    return \"S\"\r\n  } else if (deg < 247.5) {\r\n    return \"SW\"\r\n  } else if (deg < 292.5) {\r\n    return \"W\"\r\n  } else if (deg < 337.5) {\r\n    return \"NW\"\r\n  }\r\n}\r\n\r\nexport default windDirection","import React from \"react\"\r\nimport getWeatherIcon from \"../methods/getWeatherIcon\"\r\nimport windDirection from \"../methods/windDirection\"\r\n\r\nfunction CurrentWeatherDisplay(props) {\r\n  const {city, country, lat, long, currentWeather, currentDisplay} = props\r\n  if (currentWeather !== undefined){\r\n    let currentWeatherIcon = getWeatherIcon(currentWeather.iconId)\r\n\r\n  let place\r\n  if (city !== \"\") {\r\n    place = <div className = \"place-city\"><i className=\"fas fa-map-marker-alt\"></i> {city}, {country}</div>\r\n  }\r\n\r\n    return (\r\n      <div className = \"cw-display\" style = {{display:currentDisplay}}> \r\n      <div className = \"cw-title\">Current weather:</div>\r\n        <div className = \"cw-main\">\r\n          <div className = \"cw-representation\">\r\n            <div className = \"cw-icon\">{currentWeatherIcon}</div>      \r\n            <div className = \"cw-description\">{currentWeather.description}</div>\r\n          </div>\r\n          <div className = \"cw-temp\">\r\n            <div className = \"cw-temp-actual\">{currentWeather.temp}°C</div>\r\n            <div className = \"cw-temp-feels-like\">Feels like: <span className=\"feels-like-value\">{currentWeather.feels_like}°C</span></div>\r\n          </div>\r\n        </div>\r\n        <div className = \"cw-details\">\r\n          <div className = \"cw-humidity cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Humidity</div> \r\n            <div className = \"cw-detail-box-value\">{currentWeather.humidity}<span className = \"unit\">%</span></div> \r\n          </div>\r\n          <div className = \"cw-clouds cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Clouds</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.clouds}<span className = \"unit\">%</span></div>\r\n          </div>\r\n          <div className = \"cw-uvi cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">UVI</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.uvi}</div>\r\n          </div>\r\n          <div className = \"cw-visibility cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Visibility</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.visibility}<span className = \"unit\">km</span></div>\r\n          </div>\r\n          <div className = \"cw-wind cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Wind</div>\r\n            <div className = \"cw-detail-box-value wind-value\">\r\n              <div className = \"wind-speed\">{currentWeather.wind[1]}<span className = \"unit\">m/s</span></div> \r\n              <div className = \"wind-deg\">{currentWeather.wind[0]}°({windDirection(currentWeather.wind[0])})<span className = \"unit\"></span></div> \r\n            </div>\r\n          </div>\r\n          <div className = \"cw-pressure cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Pressure</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.pressure}<span className = \"unit\">hPa</span></div>\r\n          </div>\r\n          <div className = \"cw-sunrise cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Sunrise</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.sunrise}</div>\r\n          </div>\r\n          <div className = \"cw-sunset cw-detail-box\">\r\n            <div className = \"cw-detail-box-title\">Sunset</div>\r\n            <div className = \"cw-detail-box-value\">{currentWeather.sunset}</div>\r\n          </div>\r\n        </div>\r\n      \r\n      <div className = \"place\">\r\n        <div className = \"place-lat-long\">Latitude: {lat}, Longitude: {long}</div>\r\n        {place}\r\n      </div>\r\n    </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className = \"cw-display\" style={{display:currentDisplay}}> \r\n      </div>)\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default CurrentWeatherDisplay","function dayOfTheWeek(dayNumber) {\r\n  let days = {\r\n    0: \"Sunday\",\r\n    1: \"Monday\",\r\n    2: \"Tuesday\",\r\n    3: \"Wednesday\",\r\n    4: \"Thursday\",\r\n    5: \"Friday\",\r\n    6: \"Saturday\"\r\n  }\r\n  return(days[dayNumber])\r\n}\r\n\r\nexport default dayOfTheWeek","import React from \"react\"\r\nimport getWeatherIcon from \"../methods/getWeatherIcon\"\r\nimport dayOfTheWeek from \"../methods/dayOfTheWeek\"\r\n\r\nfunction ForecastDay(props) {\r\n  const {day, temp, weather, iconId, humidity, today} = props\r\n  let weatherIcon = getWeatherIcon(iconId)\r\n\r\n  let whichDay\r\n  if (day === 0) {\r\n    whichDay = \"Today\"\r\n  } else {\r\n    whichDay = dayOfTheWeek((today + day) % 7)\r\n  }\r\n\r\n  let humidityIcon \r\n  if (humidity === 0) {\r\n    humidityIcon = <i className=\"fas fa-tint-slash\"></i>\r\n  } else {\r\n    humidityIcon = <i className=\"fas fa-tint\"></i>\r\n  }\r\n  return(\r\n    <div className = \"fw-display-item\">\r\n      <div className = \"fw-day\">{whichDay}</div>\r\n      <div className = \"fw-representation\">\r\n        <div className = \"fw-icon\">{weatherIcon}</div>\r\n        <div className = \"fw-description\">{weather}</div>\r\n      </div>    \r\n      <div className = \"fw-details\">\r\n        <div className = \"fw-temp\">\r\n          <div className = \"fw-temp-day\"><i className=\"far fa-sun\"></i> {Math.round((temp.day - 273.15))}°C</div>\r\n          <div className = \"fw-temp-night\"><i className=\"far fa-moon\"></i> {Math.round(temp.night - 273.15)}°C</div>\r\n        </div>\r\n        <div className = \"fw-humidity\">{humidityIcon} {humidity}%</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ForecastDay","import React from \"react\"\r\nimport ForecastDay from \"./ForecastDay\"\r\n\r\nfunction ForecastDisplay(props) {\r\n  const {city, country, lat, long, forecastDisplay, forecastWeather} = props\r\n  const today = (new Date()).getDay()\r\n  \r\n  let place\r\n  if (city !== \"\") {\r\n    place = <div className=\"place-city\"><i className=\"fas fa-map-marker-alt\"></i> {city}, {country}</div>\r\n  }\r\n\r\n  if (forecastWeather !== undefined) {\r\n    const display = forecastWeather.map(day => \r\n      <ForecastDay \r\n        key = {day.dayIndex} \r\n        day = {day.dayIndex} \r\n        temp = {day.temp} \r\n        weather = {day.weather} \r\n        iconId = {day.iconId} \r\n        humidity = {day.humidity} \r\n        today = {today}\r\n        />)\r\n    return (\r\n      <div className = \"fw-display\" style = {{display:forecastDisplay}}>\r\n        <div className = \"fw-display-title\">\r\n          Seven Day Forecast\r\n        </div>\r\n        <div className = \"fw-results\">\r\n          {display}\r\n        </div>\r\n        <div className = \"place\">\r\n          <div className = \"place-lat-long\">Latitude: {lat}, Longitude: {long}</div>\r\n          {place}\r\n        </div>\r\n      </div>\r\n  )\r\n  } else {\r\n    return (\r\n      <div className = \"fw-weather-display\" style = {{display:forecastDisplay}}> \r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default ForecastDisplay","import startingImageWinter from \"../images/starting-bg-winter.jpg\"\r\nimport startingImageSpring from \"../images/starting-bg-spring.jpg\"\r\nimport startingImageSummer from \"../images/starting-bg-summer.jpg\"\r\nimport startingImageFall from \"../images/starting-bg-fall.jpg\"\r\n\r\n\r\nfunction startingBackgroundImage() {\r\n  const today = new Date()\r\n  const cMonth = today.getMonth()\r\n  if (cMonth < 2 || cMonth === 11) {\r\n    return (startingImageWinter)\r\n  } else if (cMonth < 5) {\r\n    return (startingImageSpring)\r\n  } else if (cMonth < 8) {\r\n    return (startingImageSummer)\r\n  } else {\r\n    return (startingImageFall)\r\n  }\r\n}\r\n\r\nexport default startingBackgroundImage","import clearday from \"../images/clear-day-bg.jpg\"\r\nimport clearnight from \"../images/clear-night-bg.jpg\"\r\nimport cloudsday from \"../images/clouds-day-bg.jpg\"\r\nimport cloudsnight from \"../images/clouds-night-bg.jpg\"\r\nimport clouds from \"../images/clouds-bg.jpg\"\r\nimport rainday from \"../images/rain-day-bg.jpg\"\r\nimport rainnight from \"../images/rain-night-bg.jpg\"\r\nimport rain from \"../images/rain-bg.jpg\"\r\nimport smog from \"../images/smog-bg.jpg\"\r\nimport snow from \"../images/snow-bg.jpg\"\r\nimport storm from \"../images/storm-bg.png\"\r\n\r\n\r\nfunction getBackgroundImage(weatherId) {\r\n  if (weatherId === \"01d\") {\r\n    return (clearday)\r\n  } else if (weatherId === \"01n\") {\r\n    return (clearnight)\r\n  } else if (weatherId === \"02d\") {\r\n    return (cloudsday)\r\n  } else if (weatherId === \"02n\") {\r\n    return (cloudsnight)\r\n  } else if (weatherId === \"03d\" || weatherId === \"03n\" || weatherId === \"04d\" || weatherId === \"04n\") {\r\n    return (clouds)\r\n  } else if (weatherId === \"09d\" || weatherId === \"09n\") {\r\n    return (rain)\r\n  } else if (weatherId === \"10d\") {\r\n    return (rainday)\r\n  } else if (weatherId === \"10n\") {\r\n    return (rainnight)\r\n  } else if (weatherId === \"11d\" || weatherId === \"11n\") {\r\n    return (storm)\r\n  } else if (weatherId === \"13d\" || weatherId === \"13n\") {\r\n    return (snow)\r\n  } else if (weatherId === \"50d\" || weatherId === \"50n\") {\r\n    return (smog)\r\n  }\r\n  return ('No icon')\r\n}\r\n\r\nexport default getBackgroundImage","import React from \"react\"\r\nimport timestampToTime from \"../methods/timestampToTime\"\r\nimport CurrentWeatherDisplay from \"./CurrentWeatherDisplay\"\r\nimport ForecastDisplay from \"./ForecastDisplay\"\r\nimport startingBackgroundImage from \"../methods/startingBackgroundImage\"\r\nimport getBackgroundImage from \"../methods/getBackgroundImage\"\r\nimport snowflake from \"../images/snowflake.svg\"\r\n\r\nclass WeatherApp extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      lat: \"0\", //latitude\r\n      long: \"0\", //longitude\r\n      city: \"\", //City, town or village\r\n      state: \"\",\r\n      country: \"\",\r\n      part: \"minutely,hourly\", //Excludes parts of weather data. Available values: \"current\", \"minutely\", \"hourly\", \"daily\", \"alerts\". Seperated by comma without spaces\r\n      weatherApiKey: \"692d3bd12adf77c08728b7324d9f2b14\", //API key for OpenWeatherMapAPI\r\n      weatherData: undefined, //data pulled from weather API\r\n      currentWeather: undefined,\r\n      forecastWeather: undefined,\r\n      locationApiKey: \"44f5f3ce977746e7ab89ddeae84b48d3\", //API key for openCageData\r\n      locationData: undefined, //data pulled from location API\r\n      cityList: <div className=\"city-list-items\"></div>,\r\n      chosenCityIndex: \"\",\r\n      formsDisplay: \"flex\", //determines if forms section is visible\r\n      currentWeatherDisplay: \"none\", //determines if current weather section is visible\r\n      forecastDisplay: \"none\", //determines if forecast section is visible\r\n      returnButtonDisplay: \"none\", //determines if return button is visible\r\n      cityListDisplay: \"none\", //determines if city list section is visible\r\n      loadingScreen: \"none\",\r\n      startingScreen: \"flex\",\r\n      backgroundImage: startingBackgroundImage()\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleCoordsCurrentWeatherSubmit = this.handleCoordsCurrentWeatherSubmit.bind(this)\r\n    this.handleCityCurrentWeatherSubmit = this.handleCityCurrentWeatherSubmit.bind(this)\r\n    this.handlePositionCurrentWeatherSubmit = this.handlePositionCurrentWeatherSubmit.bind(this)\r\n    this.handleReturnButton = this.handleReturnButton.bind(this)\r\n    this.handleCoordsForecastSubmit = this.handleCoordsForecastSubmit.bind(this)\r\n    this.handleCityForecastSubmit = this.handleCityForecastSubmit.bind(this)\r\n    this.handlePositionForecastSubmit = this.handlePositionForecastSubmit.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout( () => { \r\n      this.setState({\r\n      startingScreen: \"none\"\r\n      }) \r\n    }, 2000);\r\n    \r\n  }\r\n\r\n  //Handles change of all inputs in forms section.\r\n  handleChange(event) {\r\n    const { name, value } = event.target\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  //Handles submit of coords form (current weather). Fetches data from OpenWeatherMap API.\r\n  handleCoordsCurrentWeatherSubmit(event) {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      loadingScreen: \"flex\"\r\n    })\r\n\r\n    //URL string for weather API\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 180) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey\r\n\r\n    //fetch weather API\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res\r\n        },\r\n          this.handleCoordsCurrentWeatherSubmit2,\r\n        )\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  //Second part of coords form (current weather). Fetches data from OpenCageData API.\r\n  handleCoordsCurrentWeatherSubmit2() {\r\n    //URL string for reverse location API\r\n    let locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + (this.state.lat % 180) + \"+\" + (this.state.long % 180) + \"&key=\" + this.state.locationApiKey\r\n\r\n    console.log(locationApiUrl)\r\n\r\n    //fetch location API\r\n    fetch(locationApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          locationData: res\r\n        },\r\n          this.handleCoordsCurrentWeatherSubmit3\r\n        )\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n\r\n  }\r\n\r\n  //Third part of coords form (current weather). Sets city and country, if possible for entered coords.\r\n  handleCoordsCurrentWeatherSubmit3() {\r\n    let city, country\r\n\r\n    if (this.state.locationData.results[0].components.city !== undefined) {\r\n      city = this.state.locationData.results[0].components.city\r\n      country = this.state.locationData.results[0].components.country\r\n    } else {\r\n      city = \"\"\r\n      country = \"\"\r\n    }\r\n\r\n    this.setState({\r\n      city: city,\r\n      country: country\r\n    }, this.assignCurrentWeatherParameters\r\n    )\r\n  }\r\n\r\n  //Handles submit of the city form (current weather). Fetches data from OpenCageData API.\r\n  handleCityCurrentWeatherSubmit(event) {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      loadingScreen: \"flex\"\r\n    })\r\n\r\n    let locationApiUrl\r\n    //URL string for forward location API\r\n    if (this.state.country === \"\") {\r\n      locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + this.state.city + \"&key=\" + this.state.locationApiKey\r\n    } else {\r\n      locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + this.state.city + \"%2C\" + this.state.country + \"&key=\" + this.state.locationApiKey\r\n    }\r\n\r\n\r\n    fetch(locationApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          locationData: res\r\n        }, this.handleCityCurrentWeatherSubmit2)\r\n      })\r\n  }\r\n\r\n  //Second part of the city form submit (current weather). Creates a list of places that match the city entered in the city form. If there are no matches it displays an alert, if there is one match it goes to assignCurrentWeatherParameters function, if there is more than one match it goes to cityListDisplayForCurrentWeather.\r\n  handleCityCurrentWeatherSubmit2() {\r\n    let cityList = []\r\n\r\n    console.log(this.locationData)\r\n    this.state.locationData.results.forEach((place, placeIndex) => {\r\n      if (place.components._category === \"place\") {\r\n        if (place.confidence < 7) {\r\n          cityList.push(place)\r\n        } else if (place.components.city !== undefined) {\r\n          if (place.components.city.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components.town !== undefined) {\r\n          if (place.components.town.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components.village !== undefined) {\r\n          if (place.components.village.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components._type !== \"county\") {\r\n          if (place.components.county.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    if (cityList.length === 1) {\r\n      this.setState({\r\n        lat: this.state.locationData.results[0].geometry.lat,\r\n        long: this.state.locationData.results[0].geometry.lng,\r\n        country: this.state.locationData.results[0].components.country\r\n      }, this.fetchWeatherDataForCurrentWeather)\r\n    } else if (cityList.length > 1) {\r\n      this.setState({\r\n        locationData: cityList,\r\n        cityListDisplay: \"flex\",\r\n        formsDisplay: \"none\",\r\n        returnButtonDisplay: \"flex\"\r\n      }, this.cityListDisplayForCurrentWeather)\r\n    } else {\r\n      alert(\"No results\")\r\n      this.setState({\r\n        city: \"\",\r\n        country: \"\",\r\n        loadingScreen: \"none\"\r\n      })\r\n    }\r\n  }\r\n\r\n  //Conditional (2.1) part of the city form submit (current weather). Creates a list of places that match the one entered in the form. \r\n  cityListDisplayForCurrentWeather() {\r\n    this.setState({\r\n      loadingScreen: \"none\"\r\n    })\r\n\r\n    let cities = this.state.locationData.map((city, index) => {\r\n      if (city.components.city !== undefined) {\r\n        return (\r\n          <div key={index} className=\"city-list-item\">\r\n            <div className=\"city-name\">{city.components.city}</div>\r\n            <div className=\"city-details\">City in {city.components.state}, {city.components.country}</div>\r\n            <div className=\"city-coords\">\r\n              <div className=\"city-latitude\">Latitude: {Math.round((city.geometry.lat) * 1000) / 1000}</div>\r\n              <div className=\"city-longitude\">Longitude: {Math.round((city.geometry.lng) * 1000) / 1000}</div>\r\n            </div>\r\n            <button className=\"city-button\" onClick={() => {\r\n              this.setState({\r\n                chosenCityIndex: index\r\n              }, this.handleChosenCityForCurrentWeather)\r\n            }}>This one</button>\r\n          </div>\r\n        )\r\n      } else if (city.components.town !== undefined) {\r\n        return (\r\n          <div key={index} className=\"city-list-item\">\r\n            <div className=\"city-name\">{city.components.town}</div>\r\n            <div className=\"city-details\">Town in {city.components.state}, {city.components.country}</div>\r\n            <div className=\"city-coords\">\r\n              <div className=\"city-latitude\">Latitude: {Math.round((city.geometry.lat) * 1000) / 1000}</div>\r\n              <div className=\"city-longitude\">Longitude: {Math.round((city.geometry.lng) * 1000) / 1000}</div>\r\n            </div>\r\n            <button className=\"city-button\" onClick={() => {\r\n              this.setState({\r\n                chosenCityIndex: index\r\n              }, this.handleChosenCityForCurrentWeather)\r\n            }}>This one</button>\r\n          </div>)\r\n      } else if (city.components.village !== undefined) {\r\n        return (\r\n          <div key={index} className=\"city-list-item\">\r\n            <div className=\"city-name\">{city.components.village}</div>\r\n            <div className=\"city-details\">Village in {city.components.state}, {city.components.country}</div>\r\n            <div className=\"city-coords\">\r\n              <div className=\"city-latitude\">Latitude: {Math.round((city.geometry.lat) * 1000) / 1000}</div>\r\n              <div className=\"city-longitude\">Longitude: {Math.round((city.geometry.lng) * 1000) / 1000}</div>\r\n            </div>\r\n            <button className=\"city-button\" onClick={() => {\r\n              this.setState({\r\n                chosenCityIndex: index\r\n              }, this.handleChosenCityForCurrentWeather)\r\n            }}>This one</button>\r\n          </div>)\r\n      } else if (city.components.county !== undefined) {\r\n        return (\r\n          <div key={index} className=\"city-list-item\">\r\n            <div className=\"city-name\">{city.components.county}</div>\r\n            <div className=\"city-details\">County in {city.components.state}, {city.components.country}</div>\r\n            <div className=\"city-coords\">\r\n              <div className=\"city-latitude\">Latitude: {Math.round((city.geometry.lat) * 1000) / 1000}</div>\r\n              <div className=\"city-longitude\">Longitude: {Math.round((city.geometry.lng) * 1000) / 1000}</div>\r\n            </div>\r\n            <button className=\"city-button\" onClick={() => {\r\n              this.setState({\r\n                chosenCityIndex: index\r\n              }, this.handleChosenCityForCurrentWeather)\r\n            }}>This one</button>\r\n          </div>)\r\n      }\r\n\r\n    })\r\n\r\n    this.setState({\r\n      cityList: <div className=\"city-list-items\">{cities}</div>,\r\n\r\n    })\r\n  }\r\n\r\n  //Conditional (2.2) part of the city form submit (current weather). Assigns coords and country of the city chosen from the list. Goes to fetchWeatherDataForCurrentWeather function.\r\n  handleChosenCityForCurrentWeather() {\r\n    this.setState({\r\n      lat: this.state.locationData[this.state.chosenCityIndex].geometry.lat,\r\n      long: this.state.locationData[this.state.chosenCityIndex].geometry.lng,\r\n      country: this.state.locationData[this.state.chosenCityIndex].components.country\r\n    }, this.fetchWeatherDataForCurrentWeather)\r\n  }\r\n\r\n  //Third part of the city form submit (current weather). Fetches data from OpenWeatherMap API. Goes to assignCurrentWeatherParameters function.\r\n  fetchWeatherDataForCurrentWeather() {\r\n    //URL string for weather API\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 180) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey\r\n    console.log(weatherApiUrl)\r\n\r\n    //fetch weather API\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res,\r\n        }, this.assignCurrentWeatherParameters\r\n        )\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  //Handles submit of position form (current weather). Sets latitude and longitude based on current position of user.\r\n  handlePositionCurrentWeatherSubmit(event) {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      loadingScreen: \"flex\"\r\n    })\r\n\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      this.setState({\r\n        lat: Math.round(position.coords.latitude * 1000) / 1000,\r\n        long: Math.round(position.coords.longitude * 1000) / 1000\r\n      }, this.handlePositionCurrentWeatherSubmit2)\r\n    })\r\n  }\r\n\r\n  //Second part of position form (current weather)\r\n  handlePositionCurrentWeatherSubmit2() {\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 90) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey\r\n\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res\r\n        }, this.assignCurrentWeatherParameters)\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n\r\n    console.log(weatherApiUrl)\r\n  }\r\n\r\n  //Last part of every form (current weather). Assigns current parameters pulled from API to this.state.currentWeather object. Changes view from forms to result display.\r\n  assignCurrentWeatherParameters() {\r\n    const { weatherData } = this.state\r\n    let cWeather = {}\r\n\r\n    //sets current temperature\r\n    cWeather.temp = Math.round((weatherData.current.temp - 273.15) * 10) / 10\r\n    cWeather.feels_like = Math.round((weatherData.current.feels_like - 273.15) * 10) / 10\r\n\r\n    //sets current sunrise and sunset\r\n    cWeather.sunrise = timestampToTime(weatherData.current.sunrise)\r\n    cWeather.sunset = timestampToTime(weatherData.current.sunset)\r\n    //sets current weather parameters\r\n    cWeather.description = weatherData.current.weather[0].description\r\n    cWeather.iconId = weatherData.current.weather[0].icon\r\n    cWeather.pressure = weatherData.current.pressure\r\n    cWeather.humidity = weatherData.current.humidity\r\n    cWeather.wind = [Math.round(weatherData.current.wind_deg), weatherData.current.wind_speed]\r\n    cWeather.clouds = weatherData.current.clouds\r\n    cWeather.uvi = weatherData.current.uvi\r\n    cWeather.visibility = weatherData.current.visibility / 1000\r\n\r\n\r\n    this.setState({\r\n      currentWeather: cWeather,\r\n      formsDisplay: \"none\",\r\n      currentWeatherDisplay: \"flex\",\r\n      returnButtonDisplay: \"flex\",\r\n      cityListDisplay: \"none\",\r\n      loadingScreen: \"none\",\r\n      backgroundImage: getBackgroundImage(weatherData.current.weather[0].icon)\r\n    })\r\n\r\n  }\r\n\r\n  //Handles submit of latitude and longitude form (forecast weather). Fetches data from OpenWeatherMap API.\r\n  handleCoordsForecastSubmit(event) {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      loadingScreen: \"flex\"\r\n    })\r\n\r\n    //URL string for weather API\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 180) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey\r\n    console.log(weatherApiUrl)\r\n\r\n    //fetch weather API\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res\r\n        },\r\n          this.handleCoordsForecastSubmit2,\r\n        )\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  //Second part of latitude and longitude form (forecast weather). Fetches data from OpenCageData API.\r\n  handleCoordsForecastSubmit2() {\r\n    //URL string for reverse location API\r\n    let locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + (this.state.lat % 180) + \"+\" + (this.state.long % 180) + \"&key=\" + this.state.locationApiKey\r\n\r\n    //fetch location API\r\n    fetch(locationApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          locationData: res\r\n        },\r\n          this.handleCoordsForecastSubmit3\r\n        )\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n\r\n  }\r\n\r\n  //Third part of latitude and longitude form (forecast weather). Sets city and country, if possible for entered coords.\r\n  handleCoordsForecastSubmit3() {\r\n    let city, country\r\n\r\n    if (this.state.locationData.results[0].components.city !== undefined) {\r\n      city = this.state.locationData.results[0].components.city\r\n      country = this.state.locationData.results[0].components.country\r\n    } else {\r\n      city = \"\"\r\n      country = \"\"\r\n    }\r\n\r\n    this.setState({\r\n      city: city,\r\n      country: country\r\n    }, this.assignForecastParameters\r\n    )\r\n  }\r\n\r\n  //Handles submit of the city form (current weather). Fetches data from OpenCageData API.\r\n  handleCityForecastSubmit(event) {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      loadingScreen: \"flex\"\r\n    })\r\n\r\n    let locationApiUrl\r\n    //URL string for forward location API\r\n    if (this.state.country === \"\") {\r\n      locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + this.state.city + \"&key=\" + this.state.locationApiKey\r\n    } else {\r\n      locationApiUrl = \"https://api.opencagedata.com/geocode/v1/json?q=\" + this.state.city + \"%2C\" + this.state.country + \"&key=\" + this.state.locationApiKey\r\n    }\r\n    fetch(locationApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          locationData: res\r\n        }, this.handleCityForecastSubmit2)\r\n      })\r\n\r\n\r\n  }\r\n\r\n  //Second part of the city form submit (forecast). Creates a list of places that match the city entered in the city form. If there are no matches it displays an alert, if there is one match it goes to assignCurrentWeatherParameters function, if there is more than one match it goes to cityListDisplayForCurrentWeather.\r\n  handleCityForecastSubmit2() {\r\n    let cityList = []\r\n\r\n    this.state.locationData.results.forEach((place, placeIndex) => {\r\n      if (place.components._category === \"place\") {\r\n        if (place.confidence < 7) {\r\n          cityList.push(place)\r\n        } else if (place.components.city !== undefined) {\r\n          if (place.components.city.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components.town !== undefined) {\r\n          if (place.components.town.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components.village !== undefined) {\r\n          if (place.components.village.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        } else if (place.components._type !== \"county\") {\r\n          if (place.components.county.toLowerCase() === this.state.city.toLowerCase()) {\r\n            cityList.push(place)\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    if (cityList.length === 1) {\r\n      this.setState({\r\n        lat: this.state.locationData.results[0].geometry.lat,\r\n        long: this.state.locationData.results[0].geometry.lng,\r\n        country: this.state.locationData.results[0].components.country\r\n      }, this.fetchWeatherDataForForecast)\r\n    } else if (cityList.length > 1) {\r\n      this.setState({\r\n        locationData: cityList,\r\n        cityListDisplay: \"flex\",\r\n        formsDisplay: \"none\",\r\n        returnButtonDisplay: \"flex\"\r\n      }, this.cityListDisplayForForecast)\r\n    } else {\r\n      alert(\"No results\")\r\n      this.setState({\r\n        city: \"\",\r\n        country: \"\",\r\n        loadingScreen: \"none\"\r\n      })\r\n    }\r\n  }\r\n\r\n  //Conditional (2.1) part of the city form submit (forecast). Creates a list of places that match the one entered in the form. \r\n  cityListDisplayForForecast() {\r\n    this.setState({\r\n      loadingScreen: \"none\"\r\n    })\r\n\r\n    let cities = this.state.locationData.map((city, index) => {\r\n      if (city.components.city !== undefined) {\r\n        return (\r\n          <div key={index} className=\"city-list-item\">\r\n            <div className=\"city-name\">{city.components.city}</div>\r\n            <div className=\"city-details\">City in {city.components.state}, {city.components.country}</div>\r\n            <div className=\"city-coords\">\r\n              <div className=\"city-latitude\">Latitude: {Math.round((city.geometry.lat) * 1000) / 1000}</div>\r\n              <div className=\"city-longitude\">Longitude: {Math.round((city.geometry.lng) * 1000) / 1000}</div>\r\n            </div>\r\n            <button className=\"city-button\" onClick={() => {\r\n              this.setState({\r\n                chosenCityIndex: index\r\n              }, this.handleChosenCityForForecast)\r\n            }}>This one</button>\r\n          </div>\r\n        )\r\n      } else if (city.components.town !== undefined) {\r\n        return (\r\n          <div key={index} className=\"city-list-item\">\r\n            <div className=\"city-name\">{city.components.town}</div>\r\n            <div className=\"city-details\">Town in {city.components.state}, {city.components.country}</div>\r\n            <div className=\"city-coords\">\r\n              <div className=\"city-latitude\">Latitude: {Math.round((city.geometry.lat) * 1000) / 1000}</div>\r\n              <div className=\"city-longitude\">Longitude: {Math.round((city.geometry.lng) * 1000) / 1000}</div>\r\n            </div>\r\n            <button className=\"city-button\" onClick={() => {\r\n              this.setState({\r\n                chosenCityIndex: index\r\n              }, this.handleChosenCityForForecast)\r\n            }}>This one</button>\r\n          </div>)\r\n      } else if (city.components.village !== undefined) {\r\n        return (\r\n          <div key={index} className=\"city-list-item\">\r\n            <div className=\"city-name\">{city.components.village}</div>\r\n            <div className=\"city-details\">Village in {city.components.state}, {city.components.country}</div>\r\n            <div className=\"city-coords\">\r\n              <div className=\"city-latitude\">Latitude: {Math.round((city.geometry.lat) * 1000) / 1000}</div>\r\n              <div className=\"city-longitude\">Longitude: {Math.round((city.geometry.lng) * 1000) / 1000}</div>\r\n            </div>\r\n            <button className=\"city-button\" onClick={() => {\r\n              this.setState({\r\n                chosenCityIndex: index\r\n              }, this.handleChosenCityForForecast)\r\n            }}>This one</button>\r\n          </div>)\r\n      } else if (city.components.county !== undefined) {\r\n        return (\r\n          <div key={index} className=\"city-list-item\">\r\n            <div className=\"city-name\">{city.components.county}</div>\r\n            <div className=\"city-details\">County in {city.components.state}, {city.components.country}</div>\r\n            <div className=\"city-coords\">\r\n              <div className=\"city-latitude\">Latitude: {Math.round((city.geometry.lat) * 1000) / 1000}</div>\r\n              <div className=\"city-longitude\">Longitude: {Math.round((city.geometry.lng) * 1000) / 1000}</div>\r\n            </div>\r\n            <button className=\"city-button\" onClick={() => {\r\n              this.setState({\r\n                chosenCityIndex: index\r\n              }, this.handleChosenCityForForecast)\r\n            }}>This one</button>\r\n          </div>)\r\n      }\r\n\r\n    })\r\n\r\n    this.setState({\r\n      cityList: <div className=\"city-list-items\">{cities}</div>\r\n    })\r\n  }\r\n\r\n  //Conditional (2.2) part of the city form submit (forecast). Assigns coords and country of the city chosen from the list. Goes to fetchWeatherDataForCurrentWeather function.\r\n  handleChosenCityForForecast() {\r\n    this.setState({\r\n      lat: this.state.locationData[this.state.chosenCityIndex].geometry.lat,\r\n      long: this.state.locationData[this.state.chosenCityIndex].geometry.lng,\r\n      country: this.state.locationData[this.state.chosenCityIndex].components.country\r\n    }, this.fetchWeatherDataForForecast)\r\n  }\r\n\r\n  //Third part of the city form submit (forecast). Fetches data from OpenWeatherMap API. Goes to assignCurrentWeatherParameters function.\r\n  fetchWeatherDataForForecast() {\r\n    //URL string for weather API\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 180) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey\r\n    console.log(weatherApiUrl)\r\n\r\n    //fetch weather API\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res,\r\n        }, this.assignForecastParameters\r\n        )\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  //Handles submit of position form (forecast). Sets latitude and longitude based on forecast position of user.\r\n  handlePositionForecastSubmit(event) {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      loadingScreen: \"flex\"\r\n    })\r\n\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      this.setState({\r\n        lat: Math.round(position.coords.latitude * 1000) / 1000,\r\n        long: Math.round(position.coords.longitude * 1000) / 1000\r\n      }, this.handlePositionForecastSubmit2)\r\n    })\r\n  }\r\n\r\n  //Second part of position form (forecast)\r\n  handlePositionForecastSubmit2() {\r\n    let weatherApiUrl = \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + (this.state.lat % 90) + \"&lon=\" + (this.state.long % 180) + \"&exclude=\" + this.state.part + \"&appid=\" + this.state.weatherApiKey\r\n\r\n    fetch(weatherApiUrl)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        this.setState({\r\n          weatherData: res\r\n        }, this.assignForecastParameters)\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n\r\n    console.log(weatherApiUrl)\r\n  }\r\n\r\n  //Last part of every form (forecast). Assigns forecast parameters pulled from API to this.state.forecastWeather object. Changes view from forms to result display.\r\n  assignForecastParameters() {\r\n    const { weatherData } = this.state\r\n    let fWeather = []\r\n\r\n    weatherData.daily.forEach((day, index) => {\r\n      fWeather.push({\r\n        dayIndex: index,\r\n        temp: day.temp,\r\n        weather: day.weather[0].description,\r\n        iconId: day.weather[0].icon,\r\n        humidity: day.humidity\r\n      })\r\n    })\r\n\r\n    this.setState({\r\n      forecastWeather: fWeather,\r\n      formsDisplay: \"none\",\r\n      forecastDisplay: \"flex\",\r\n      returnButtonDisplay: \"flex\",\r\n      cityListDisplay: \"none\",\r\n      loadingScreen: \"none\",\r\n      backgroundImage: getBackgroundImage(weatherData.current.weather[0].icon)\r\n    })\r\n\r\n  }\r\n\r\n  //Handles Return button click.\r\n  handleReturnButton(event) {\r\n    this.setState({\r\n      lat: 0,\r\n      long: 0,\r\n      city: \"\",\r\n      country: \"\",\r\n      formsDisplay: \"flex\",\r\n      currentWeatherDisplay: \"none\",\r\n      forecastDisplay: \"none\",\r\n      returnButtonDisplay: \"none\",\r\n      cityListDisplay: \"none\",\r\n      backgroundImage: startingBackgroundImage()\r\n    })\r\n    event.preventDefault()\r\n  }\r\n\r\n  render() {\r\n    const { city, country, lat, long, currentWeatherDisplay, formsDisplay,\r\n      returnButtonDisplay, currentWeather, forecastWeather, forecastDisplay,\r\n      cityListDisplay, cityList, backgroundImage, loadingScreen, startingScreen } = this.state\r\n\r\n    return (\r\n      <div className=\"weather-app\" style={{ backgroundImage: `url(${backgroundImage})` }}>\r\n        <div className=\"loading-screen\" style={{ display: loadingScreen }}> <svg id=\"Layer_1\" enable-background=\"new 0 0 512 512\" height=\"512\" viewBox=\"0 0 512 512\" width=\"512\" xmlns=\"http://www.w3.org/2000/svg\"><g><g><path d=\"m204.381 396.158c-1.938 0-3.875-.375-5.704-1.127-3.773-1.551-6.751-4.572-8.249-8.366l-18.404-46.629-46.458-18.055c-3.802-1.478-6.838-4.44-8.41-8.205-1.571-3.765-1.541-8.006.083-11.749l19.958-45.985-20.084-45.617c-1.644-3.733-1.696-7.975-.145-11.748s4.572-6.751 8.366-8.249l46.629-18.404 18.055-46.458c1.478-3.802 4.44-6.838 8.205-8.41 3.764-1.571 8.005-1.542 11.749.083l45.985 19.958 45.617-20.084c3.733-1.644 7.976-1.697 11.748-.145 3.773 1.551 6.751 4.572 8.249 8.366l18.404 46.629 46.458 18.055c3.802 1.478 6.838 4.44 8.41 8.205 1.571 3.765 1.541 8.006-.083 11.749l-19.958 45.985 20.084 45.617c1.644 3.733 1.696 7.975.145 11.748s-4.572 6.751-8.366 8.249l-46.629 18.404-18.055 46.458c-1.478 3.802-4.44 6.838-8.205 8.41-3.765 1.57-8.007 1.541-11.749-.083l-45.985-19.958-45.617 20.084c-1.924.847-3.983 1.272-6.044 1.272zm-53.413-96.491 38.036 14.781c3.896 1.515 6.984 4.586 8.519 8.475l15.086 38.223 37.347-16.443c3.827-1.684 8.182-1.696 12.017-.032l37.695 16.36 14.781-38.035c1.515-3.896 4.586-6.984 8.475-8.519l38.223-15.086-16.443-37.347c-1.685-3.826-1.696-8.182-.032-12.017l16.361-37.695-38.036-14.781c-3.896-1.515-6.984-4.586-8.519-8.475l-15.086-38.223-37.347 16.443c-3.826 1.685-8.181 1.697-12.017.032l-37.695-16.36-14.781 38.035c-1.515 3.896-4.586 6.984-8.475 8.519l-38.223 15.086 16.443 37.347c1.685 3.826 1.696 8.182.032 12.017z\" fill=\"#4793ff\"/></g><path d=\"m394.886 301.574-20.084-45.617 19.958-45.985c1.624-3.742 1.654-7.984.083-11.749s-4.607-6.727-8.41-8.205l-46.458-18.055-18.404-46.629c-1.498-3.794-4.476-6.815-8.249-8.366-3.772-1.552-8.015-1.499-11.748.145l-45.574 20.066v31.388c2.06 0 4.119-.422 6.045-1.27l37.347-16.443 15.086 38.223c1.535 3.889 4.623 6.96 8.519 8.475l38.036 14.781-16.361 37.695c-1.665 3.835-1.653 8.19.032 12.017l16.443 37.347-38.223 15.086c-3.889 1.535-6.96 4.623-8.475 8.519l-14.781 38.035-37.695-16.36c-1.905-.827-3.939-1.238-5.972-1.238v31.387l.043-.019 45.985 19.958c3.742 1.624 7.984 1.654 11.749.083s6.727-4.607 8.205-8.41l18.055-46.458 46.629-18.404c3.794-1.498 6.815-4.476 8.366-8.249 1.55-3.773 1.497-8.014-.147-11.748z\" fill=\"#525cdd\"/><path d=\"m311.638 30.569c-4.142-7.175-13.314-9.633-20.49-5.49l-35.148 20.292-35.148-20.292c-7.176-4.144-16.349-1.684-20.49 5.49-4.142 7.174-1.684 16.348 5.49 20.49l41.443 23.927c2.362 1.364 4.941 2.012 7.486 2.012.408 0 .814-.023 1.219-.056.405.033.811.056 1.219.056 2.544 0 5.124-.648 7.486-2.012l41.443-23.927c7.174-4.142 9.632-13.316 5.49-20.49z\" fill=\"#7dd5f4\"/><path d=\"m306.147 460.941-41.443-23.927c-2.742-1.583-5.774-2.196-8.708-1.956-2.932-.238-5.962.374-8.702 1.956l-41.443 23.927c-7.174 4.142-9.632 13.316-5.49 20.49 2.778 4.813 7.82 7.502 13.004 7.502 2.544 0 5.124-.648 7.486-2.012l35.149-20.292 35.148 20.293c2.362 1.364 4.941 2.012 7.486 2.012 5.184 0 10.226-2.69 13.004-7.502 4.142-7.175 1.684-16.349-5.491-20.491z\" fill=\"#7dd5f4\"/><path d=\"m466.629 256 20.292-35.148c4.142-7.174 1.684-16.348-5.49-20.49-7.175-4.144-16.349-1.685-20.49 5.49l-23.927 41.443c-1.582 2.741-2.195 5.772-1.956 8.705-.239 2.932.373 5.964 1.956 8.705l23.927 41.443c2.778 4.813 7.82 7.502 13.004 7.502 2.544 0 5.124-.648 7.486-2.012 7.174-4.142 9.632-13.316 5.49-20.49z\" fill=\"#4793ff\"/><path d=\"m74.986 247.295-23.927-41.443c-4.142-7.174-13.316-9.633-20.49-5.49-7.174 4.142-9.632 13.316-5.49 20.49l20.292 35.148-20.293 35.148c-4.142 7.174-1.684 16.348 5.49 20.49 2.362 1.364 4.941 2.012 7.486 2.012 5.184 0 10.226-2.69 13.004-7.502l23.927-41.443c1.582-2.741 2.195-5.772 1.956-8.705.24-2.933-.373-5.964-1.955-8.705z\" fill=\"#7dd5f4\"/><path d=\"m454.746 376.062c-2.145-8.001-10.368-12.754-18.371-10.606l-46.223 12.386c-3.056.819-5.632 2.529-7.536 4.77-2.243 1.905-3.955 4.482-4.774 7.54l-12.386 46.224c-2.144 8.002 2.604 16.227 10.606 18.371 1.301.349 2.606.515 3.892.515 6.623 0 12.684-4.42 14.479-11.122l10.504-39.203 39.202-10.504c8.002-2.144 12.751-10.37 10.607-18.371z\" fill=\"#4793ff\"/><path d=\"m135.937 57.253c-8.004-2.145-16.227 2.605-18.371 10.606l-10.504 39.203-39.202 10.504c-8.002 2.144-12.75 10.369-10.606 18.371 1.795 6.702 7.856 11.122 14.479 11.122 1.285 0 2.591-.167 3.892-.515l46.224-12.385c3.063-.821 5.643-2.537 7.549-4.786 2.236-1.904 3.944-4.474 4.761-7.525l12.386-46.224c2.143-8.001-2.606-16.227-10.608-18.371z\" fill=\"#7dd5f4\"/><path d=\"m444.139 117.566-39.202-10.504-10.504-39.202c-2.145-8.002-10.368-12.752-18.371-10.606-8.002 2.144-12.75 10.369-10.606 18.371l12.386 46.223c.818 3.051 2.526 5.622 4.762 7.526 1.905 2.249 4.485 3.964 7.548 4.785l46.224 12.386c1.301.349 2.606.515 3.892.515 6.623 0 12.684-4.42 14.479-11.122 2.143-8.002-2.606-16.228-10.608-18.372z\" fill=\"#4793ff\"/><path d=\"m146.544 436.375-12.386-46.224c-.819-3.058-2.531-5.635-4.774-7.54-1.904-2.242-4.48-3.951-7.536-4.77l-46.224-12.386c-8.006-2.146-16.228 2.604-18.371 10.606-2.144 8.002 2.604 16.227 10.606 18.371l39.202 10.504 10.504 39.202c1.796 6.702 7.856 11.122 14.479 11.122 1.285 0 2.591-.167 3.892-.515 8.003-2.143 12.752-10.369 10.608-18.37z\" fill=\"#7dd5f4\"/><path d=\"m497 241h-204.787l144.806-144.806c5.858-5.858 5.858-15.355 0-21.213-5.857-5.858-15.355-5.858-21.213 0l-144.806 144.806v-204.787c0-8.284-6.716-15-15-15s-15 6.716-15 15v204.787l-144.806-144.806c-5.857-5.858-15.355-5.858-21.213 0s-5.858 15.355 0 21.213l144.806 144.806h-204.787c-8.284 0-15 6.716-15 15s6.716 15 15 15h204.787l-144.806 144.806c-5.858 5.858-5.858 15.355 0 21.213 2.929 2.929 6.768 4.394 10.606 4.394s7.678-1.464 10.606-4.394l144.807-144.806v204.787c0 8.284 6.716 15 15 15s15-6.716 15-15v-204.787l144.806 144.806c2.929 2.929 6.768 4.394 10.606 4.394s7.678-1.464 10.606-4.394c5.858-5.858 5.858-15.355 0-21.213l-144.805-144.806h204.787c8.284 0 15-6.716 15-15s-6.716-15-15-15z\" fill=\"#7dd5f4\"/><g fill=\"#4793ff\"><path d=\"m497 241h-204.787l144.806-144.806c5.858-5.858 5.858-15.355 0-21.213-5.857-5.858-15.355-5.858-21.213 0l-144.806 144.806v-204.787c0-8.284-6.716-15-15-15v512c8.284 0 15-6.716 15-15v-204.787l144.806 144.806c2.929 2.929 6.768 4.394 10.606 4.394s7.678-1.464 10.606-4.394c5.858-5.858 5.858-15.355 0-21.213l-144.805-144.806h204.787c8.284 0 15-6.716 15-15s-6.716-15-15-15z\"/><path d=\"m311.638 30.569c-4.142-7.175-13.314-9.633-20.49-5.49l-35.148 20.292v31.572c.405.033.811.056 1.219.056 2.544 0 5.124-.648 7.486-2.012l41.443-23.927c7.174-4.143 9.632-13.317 5.49-20.491z\"/><path d=\"m306.147 460.941-41.443-23.927c-2.741-1.583-5.773-2.195-8.705-1.956v31.571l35.148 20.293c2.362 1.364 4.941 2.012 7.486 2.012 5.184 0 10.226-2.69 13.004-7.502 4.143-7.175 1.685-16.349-5.49-20.491z\"/></g></g></svg>\r\n        </div>\r\n        <div className=\"starting-screen\" style={{ display: startingScreen }}></div>\r\n\r\n        <button\r\n          onClick={this.handleReturnButton}\r\n          style={{ display: returnButtonDisplay }}\r\n          className=\"return-button\">\r\n          <span className=\"return-icon\"><i class=\"fas fa-chevron-left\"></i></span>\r\n          <span className=\"return-text\">Return</span>\r\n        </button>\r\n        <div className=\"forms\" style={{ display: formsDisplay }}>\r\n          <div className=\"forms-title\">EveryWeather</div>\r\n          <div className=\"forms-desc\">Get weather data for any place!</div>\r\n          <div className=\"position-form\">\r\n            <form>\r\n              <label>For your current position</label>\r\n              <div className=\"submit-buttons\">\r\n                <button onClick={this.handlePositionCurrentWeatherSubmit} className=\"current-weather-button\">Get <b>current weather</b></button>\r\n                <button onClick={this.handlePositionForecastSubmit} className=\"forecast-weather-button\">Get <b>seven day forecast</b> </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <h1 className=\"or\">OR</h1>\r\n          <div className=\"city-form\">\r\n            <form>\r\n              <label>\r\n                Search by the name of a place:\r\n              </label>\r\n              <div className=\"city-country-inputs\">\r\n                <div className=\"city-input\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"city\"\r\n                    value={city}\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"City\"\r\n                    required />\r\n                </div>\r\n                <div className=\"country-input\">\r\n                  <input\r\n                    type=\"text\"\r\n                    list=\"country\"\r\n                    value={this.state.country}\r\n                    name=\"country\"\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"Country*\"\r\n                  />\r\n                  <datalist id=\"country\">\r\n                    <option value=\"\">Country*</option>\r\n                    <option>Australia</option>\r\n                    <option>Brazil</option>\r\n                    <option>China</option>\r\n                    <option>France</option>\r\n                    <option>Germany</option>\r\n                    <option>Japan</option>\r\n                    <option>Poland</option>\r\n                    <option>Russia</option>\r\n                    <option>Spain</option>\r\n                    <option>United Kingdom</option>\r\n                    <option>United States</option>\r\n                  </datalist>\r\n                </div>\r\n              </div>\r\n              <p>*You may specify a country to help narrow the results, though it's not required.</p>\r\n              <div className=\"submit-buttons\">\r\n                <button onClick={this.handleCityCurrentWeatherSubmit} className=\"current-weather-button\">Get current weather</button>\r\n                <button onClick={this.handleCityForecastSubmit} className=\"forecast-weather-button\">Get seven day forecast</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <h1 className=\"or\">OR</h1>\r\n\r\n          <div className=\"lat-long-form\">\r\n            <form>\r\n              <label>\r\n                Enter latitude:\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.001\"\r\n                name=\"lat\"\r\n                value={lat}\r\n                onChange={this.handleChange}\r\n                required />\r\n              <label>\r\n                Enter longitude:\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.001\"\r\n                name=\"long\"\r\n                value={long}\r\n                onChange={this.handleChange}\r\n                required />\r\n              <div className=\"submit-buttons\">\r\n                <button onClick={this.handleCoordsCurrentWeatherSubmit} className=\"current-weather-button\">Get current weather</button>\r\n                <button onClick={this.handleCoordsForecastSubmit} className=\"forecast-weather-button\">Get seven day forecast</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        <CurrentWeatherDisplay\r\n          city={city}\r\n          country={country}\r\n          lat={lat}\r\n          long={long}\r\n          currentDisplay={currentWeatherDisplay}\r\n          currentWeather={currentWeather}\r\n        />\r\n        <ForecastDisplay\r\n          city={city}\r\n          country={country}\r\n          lat={lat}\r\n          long={long}\r\n          forecastDisplay={forecastDisplay}\r\n          forecastWeather={forecastWeather}\r\n        />\r\n\r\n        <div className=\"city-list\" style={{ display: cityListDisplay }}>\r\n          <div className=\"city-list-title\">Which place did you have in mind?</div>\r\n          {cityList}\r\n        </div>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherApp","import React from \"react\"\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n      <div>\r\n        Developed by Aleksander Gralewski, 2020\r\n      </div>\r\n      <div style={{display:\"none\"}}>\r\n        Images credits:\r\n        <a href=\"https://www.pexels.com/pl-pl/@david-bartus-43782?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels,\r\n\">David Bartus</a>\r\n        <a href=\"https://www.pexels.com/pl-pl/@8moments?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels\r\n\">Simon Matzinger</a>\r\n        <a href=\"https://www.pexels.com/pl-pl/@agata-257956?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels\r\n\">Agata</a>\r\n        <a href=\"https://www.pexels.com/pl-pl/@zhangkaiyv?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels\">Zhang kaiyv</a>\r\n      </div>\r\n      <div className=\"social-icons\">\r\n        <a href=\"https://github.com/AlexGralewski\"><i className=\"fab fa-github\"></i></a>\r\n        <a href=\"https://www.linkedin.com/in/aleksander-gralewski-1a01a7185/\"><i className=\"fab fa-linkedin-in\"></i></a>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\n\r\nimport WeatherApp from \"./components/WeatherApp\"\r\nimport Footer from \"./components/Footer\"\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <WeatherApp />\r\n      <Footer />      \r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}